/*
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.3.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldnewsapi;

import com.worldnewsapi.client.ApiCallback;
import com.worldnewsapi.client.ApiClient;
import com.worldnewsapi.client.ApiException;
import com.worldnewsapi.client.ApiResponse;
import com.worldnewsapi.client.Configuration;
import com.worldnewsapi.client.Pair;
import com.worldnewsapi.client.ProgressRequestBody;
import com.worldnewsapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.worldnewsapi.client.model.ExtractNews200Response;
import com.worldnewsapi.client.model.ExtractNewsLinks200Response;
import com.worldnewsapi.client.model.GetGeoCoordinates200Response;
import com.worldnewsapi.client.model.NewspaperFrontPages200Response;
import com.worldnewsapi.client.model.RetrieveNewsArticlesByIds200Response;
import com.worldnewsapi.client.model.SearchNews200Response;
import com.worldnewsapi.client.model.TopNews200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extractNews
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news/">Extract News Documentation</a>
     */
    public okhttp3.Call extractNewsCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extract-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractNewsValidateBeforeCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractNews(Async)");
        }

        // verify the required parameter 'analyze' is set
        if (analyze == null) {
            throw new ApiException("Missing the required parameter 'analyze' when calling extractNews(Async)");
        }

        return extractNewsCall(url, analyze, _callback);

    }

    /**
     * Extract News
     * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ExtractNews200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news/">Extract News Documentation</a>
     */
    public ExtractNews200Response extractNews(String url, Boolean analyze) throws ApiException {
        ApiResponse<ExtractNews200Response> localVarResp = extractNewsWithHttpInfo(url, analyze);
        return localVarResp.getData();
    }

    /**
     * Extract News
     * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ApiResponse&lt;ExtractNews200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news/">Extract News Documentation</a>
     */
    public ApiResponse<ExtractNews200Response> extractNewsWithHttpInfo(String url, Boolean analyze) throws ApiException {
        okhttp3.Call localVarCall = extractNewsValidateBeforeCall(url, analyze, null);
        Type localVarReturnType = new TypeToken<ExtractNews200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract News (asynchronously)
     * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news/">Extract News Documentation</a>
     */
    public okhttp3.Call extractNewsAsync(String url, Boolean analyze, final ApiCallback<ExtractNews200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractNewsValidateBeforeCall(url, analyze, _callback);
        Type localVarReturnType = new TypeToken<ExtractNews200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractNewsLinks
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news-links/">Extract News Links Documentation</a>
     */
    public okhttp3.Call extractNewsLinksCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extract-news-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractNewsLinksValidateBeforeCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractNewsLinks(Async)");
        }

        // verify the required parameter 'analyze' is set
        if (analyze == null) {
            throw new ApiException("Missing the required parameter 'analyze' when calling extractNewsLinks(Async)");
        }

        return extractNewsLinksCall(url, analyze, _callback);

    }

    /**
     * Extract News Links
     * Extract news links from a news website.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ExtractNewsLinks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news-links/">Extract News Links Documentation</a>
     */
    public ExtractNewsLinks200Response extractNewsLinks(String url, Boolean analyze) throws ApiException {
        ApiResponse<ExtractNewsLinks200Response> localVarResp = extractNewsLinksWithHttpInfo(url, analyze);
        return localVarResp.getData();
    }

    /**
     * Extract News Links
     * Extract news links from a news website.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ApiResponse&lt;ExtractNewsLinks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news-links/">Extract News Links Documentation</a>
     */
    public ApiResponse<ExtractNewsLinks200Response> extractNewsLinksWithHttpInfo(String url, Boolean analyze) throws ApiException {
        okhttp3.Call localVarCall = extractNewsLinksValidateBeforeCall(url, analyze, null);
        Type localVarReturnType = new TypeToken<ExtractNewsLinks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract News Links (asynchronously)
     * Extract news links from a news website.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/extract-news-links/">Extract News Links Documentation</a>
     */
    public okhttp3.Call extractNewsLinksAsync(String url, Boolean analyze, final ApiCallback<ExtractNewsLinks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractNewsLinksValidateBeforeCall(url, analyze, _callback);
        Type localVarReturnType = new TypeToken<ExtractNewsLinks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeoCoordinates
     * @param location The address or name of the location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/get-geo-coordinates/">Get Geo Coordinates Documentation</a>
     */
    public okhttp3.Call getGeoCoordinatesCall(String location, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo-coordinates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeoCoordinatesValidateBeforeCall(String location, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling getGeoCoordinates(Async)");
        }

        return getGeoCoordinatesCall(location, _callback);

    }

    /**
     * Get Geo Coordinates
     * Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
     * @param location The address or name of the location. (required)
     * @return GetGeoCoordinates200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/get-geo-coordinates/">Get Geo Coordinates Documentation</a>
     */
    public GetGeoCoordinates200Response getGeoCoordinates(String location) throws ApiException {
        ApiResponse<GetGeoCoordinates200Response> localVarResp = getGeoCoordinatesWithHttpInfo(location);
        return localVarResp.getData();
    }

    /**
     * Get Geo Coordinates
     * Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
     * @param location The address or name of the location. (required)
     * @return ApiResponse&lt;GetGeoCoordinates200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/get-geo-coordinates/">Get Geo Coordinates Documentation</a>
     */
    public ApiResponse<GetGeoCoordinates200Response> getGeoCoordinatesWithHttpInfo(String location) throws ApiException {
        okhttp3.Call localVarCall = getGeoCoordinatesValidateBeforeCall(location, null);
        Type localVarReturnType = new TypeToken<GetGeoCoordinates200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Geo Coordinates (asynchronously)
     * Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
     * @param location The address or name of the location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/get-geo-coordinates/">Get Geo Coordinates Documentation</a>
     */
    public okhttp3.Call getGeoCoordinatesAsync(String location, final ApiCallback<GetGeoCoordinates200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeoCoordinatesValidateBeforeCall(location, _callback);
        Type localVarReturnType = new TypeToken<GetGeoCoordinates200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newsWebsiteToRSSFeed
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/website-to-rss-feed/">News Website to RSS Feed Documentation</a>
     */
    public okhttp3.Call newsWebsiteToRSSFeedCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feed.rss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newsWebsiteToRSSFeedValidateBeforeCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling newsWebsiteToRSSFeed(Async)");
        }

        // verify the required parameter 'analyze' is set
        if (analyze == null) {
            throw new ApiException("Missing the required parameter 'analyze' when calling newsWebsiteToRSSFeed(Async)");
        }

        return newsWebsiteToRSSFeedCall(url, analyze, _callback);

    }

    /**
     * News Website to RSS Feed
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/website-to-rss-feed/">News Website to RSS Feed Documentation</a>
     */
    public Object newsWebsiteToRSSFeed(String url, Boolean analyze) throws ApiException {
        ApiResponse<Object> localVarResp = newsWebsiteToRSSFeedWithHttpInfo(url, analyze);
        return localVarResp.getData();
    }

    /**
     * News Website to RSS Feed
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/website-to-rss-feed/">News Website to RSS Feed Documentation</a>
     */
    public ApiResponse<Object> newsWebsiteToRSSFeedWithHttpInfo(String url, Boolean analyze) throws ApiException {
        okhttp3.Call localVarCall = newsWebsiteToRSSFeedValidateBeforeCall(url, analyze, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * News Website to RSS Feed (asynchronously)
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/website-to-rss-feed/">News Website to RSS Feed Documentation</a>
     */
    public okhttp3.Call newsWebsiteToRSSFeedAsync(String url, Boolean analyze, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = newsWebsiteToRSSFeedValidateBeforeCall(url, analyze, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newspaperFrontPages
     * @param sourceCountry The ISO 3166 country code of the newspaper publication. (optional)
     * @param sourceName The identifier of the publication see attached list. (optional)
     * @param date The date for which the front page should be retrieved. You can also go into the past, the earliest date is 2024-07-09. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/newspaper-front-pages/">Newspaper Front Pages Documentation</a>
     */
    public okhttp3.Call newspaperFrontPagesCall(String sourceCountry, String sourceName, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retrieve-front-page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-country", sourceCountry));
        }

        if (sourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-name", sourceName));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newspaperFrontPagesValidateBeforeCall(String sourceCountry, String sourceName, String date, final ApiCallback _callback) throws ApiException {
        return newspaperFrontPagesCall(sourceCountry, sourceName, date, _callback);

    }

    /**
     * Newspaper Front Pages
     * Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
     * @param sourceCountry The ISO 3166 country code of the newspaper publication. (optional)
     * @param sourceName The identifier of the publication see attached list. (optional)
     * @param date The date for which the front page should be retrieved. You can also go into the past, the earliest date is 2024-07-09. (optional)
     * @return NewspaperFrontPages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/newspaper-front-pages/">Newspaper Front Pages Documentation</a>
     */
    public NewspaperFrontPages200Response newspaperFrontPages(String sourceCountry, String sourceName, String date) throws ApiException {
        ApiResponse<NewspaperFrontPages200Response> localVarResp = newspaperFrontPagesWithHttpInfo(sourceCountry, sourceName, date);
        return localVarResp.getData();
    }

    /**
     * Newspaper Front Pages
     * Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
     * @param sourceCountry The ISO 3166 country code of the newspaper publication. (optional)
     * @param sourceName The identifier of the publication see attached list. (optional)
     * @param date The date for which the front page should be retrieved. You can also go into the past, the earliest date is 2024-07-09. (optional)
     * @return ApiResponse&lt;NewspaperFrontPages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/newspaper-front-pages/">Newspaper Front Pages Documentation</a>
     */
    public ApiResponse<NewspaperFrontPages200Response> newspaperFrontPagesWithHttpInfo(String sourceCountry, String sourceName, String date) throws ApiException {
        okhttp3.Call localVarCall = newspaperFrontPagesValidateBeforeCall(sourceCountry, sourceName, date, null);
        Type localVarReturnType = new TypeToken<NewspaperFrontPages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Newspaper Front Pages (asynchronously)
     * Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
     * @param sourceCountry The ISO 3166 country code of the newspaper publication. (optional)
     * @param sourceName The identifier of the publication see attached list. (optional)
     * @param date The date for which the front page should be retrieved. You can also go into the past, the earliest date is 2024-07-09. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/newspaper-front-pages/">Newspaper Front Pages Documentation</a>
     */
    public okhttp3.Call newspaperFrontPagesAsync(String sourceCountry, String sourceName, String date, final ApiCallback<NewspaperFrontPages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = newspaperFrontPagesValidateBeforeCall(sourceCountry, sourceName, date, _callback);
        Type localVarReturnType = new TypeToken<NewspaperFrontPages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveNewsArticlesByIds
     * @param ids A comma separated list of news ids. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/retrieve-news/">Retrieve News Articles by Ids Documentation</a>
     */
    public okhttp3.Call retrieveNewsArticlesByIdsCall(String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retrieve-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveNewsArticlesByIdsValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling retrieveNewsArticlesByIds(Async)");
        }

        return retrieveNewsArticlesByIdsCall(ids, _callback);

    }

    /**
     * Retrieve News Articles by Ids
     * Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
     * @param ids A comma separated list of news ids. (required)
     * @return RetrieveNewsArticlesByIds200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/retrieve-news/">Retrieve News Articles by Ids Documentation</a>
     */
    public RetrieveNewsArticlesByIds200Response retrieveNewsArticlesByIds(String ids) throws ApiException {
        ApiResponse<RetrieveNewsArticlesByIds200Response> localVarResp = retrieveNewsArticlesByIdsWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Retrieve News Articles by Ids
     * Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
     * @param ids A comma separated list of news ids. (required)
     * @return ApiResponse&lt;RetrieveNewsArticlesByIds200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/retrieve-news/">Retrieve News Articles by Ids Documentation</a>
     */
    public ApiResponse<RetrieveNewsArticlesByIds200Response> retrieveNewsArticlesByIdsWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = retrieveNewsArticlesByIdsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<RetrieveNewsArticlesByIds200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve News Articles by Ids (asynchronously)
     * Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
     * @param ids A comma separated list of news ids. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/retrieve-news/">Retrieve News Articles by Ids Documentation</a>
     */
    public okhttp3.Call retrieveNewsArticlesByIdsAsync(String ids, final ApiCallback<RetrieveNewsArticlesByIds200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveNewsArticlesByIdsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<RetrieveNewsArticlesByIds200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchNews
     * @param text The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param categories A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)
     * @param entities Filter news by entities (see semantic types). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)
     * @param sort The sorting criteria (publish-time). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/search-news/">Search News Documentation</a>
     */
    public okhttp3.Call searchNewsCall(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String categories, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (sourceCountries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-countries", sourceCountries));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (minSentiment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-sentiment", minSentiment));
        }

        if (maxSentiment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-sentiment", maxSentiment));
        }

        if (earliestPublishDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earliest-publish-date", earliestPublishDate));
        }

        if (latestPublishDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest-publish-date", latestPublishDate));
        }

        if (newsSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("news-sources", newsSources));
        }

        if (authors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authors", authors));
        }

        if (categories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories", categories));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (locationFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location-filter", locationFilter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-direction", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchNewsValidateBeforeCall(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String categories, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        return searchNewsCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number, _callback);

    }

    /**
     * Search News
     * Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
     * @param text The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param categories A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)
     * @param entities Filter news by entities (see semantic types). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)
     * @param sort The sorting criteria (publish-time). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @return SearchNews200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/search-news/">Search News Documentation</a>
     */
    public SearchNews200Response searchNews(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String categories, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number) throws ApiException {
        ApiResponse<SearchNews200Response> localVarResp = searchNewsWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search News
     * Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
     * @param text The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param categories A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)
     * @param entities Filter news by entities (see semantic types). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)
     * @param sort The sorting criteria (publish-time). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @return ApiResponse&lt;SearchNews200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/search-news/">Search News Documentation</a>
     */
    public ApiResponse<SearchNews200Response> searchNewsWithHttpInfo(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String categories, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchNewsValidateBeforeCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number, null);
        Type localVarReturnType = new TypeToken<SearchNews200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search News (asynchronously)
     * Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
     * @param text The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param categories A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)
     * @param entities Filter news by entities (see semantic types). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)
     * @param sort The sorting criteria (publish-time). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/search-news/">Search News Documentation</a>
     */
    public okhttp3.Call searchNewsAsync(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String categories, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number, final ApiCallback<SearchNews200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchNewsValidateBeforeCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number, _callback);
        Type localVarReturnType = new TypeToken<SearchNews200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topNews
     * @param sourceCountry The ISO 3166 country code of the country for which top news should be retrieved. (required)
     * @param language The ISO 6391 language code of the top news. The language must be one spoken in the source-country. (required)
     * @param date The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)
     * @param headlinesOnly Whether to only return basic information such as id, title, and url of the news. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/top-news/">Top News Documentation</a>
     */
    public okhttp3.Call topNewsCall(String sourceCountry, String language, String date, Boolean headlinesOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/top-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-country", sourceCountry));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (headlinesOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headlines-only", headlinesOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topNewsValidateBeforeCall(String sourceCountry, String language, String date, Boolean headlinesOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceCountry' is set
        if (sourceCountry == null) {
            throw new ApiException("Missing the required parameter 'sourceCountry' when calling topNews(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling topNews(Async)");
        }

        return topNewsCall(sourceCountry, language, date, headlinesOnly, _callback);

    }

    /**
     * Top News
     * Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
     * @param sourceCountry The ISO 3166 country code of the country for which top news should be retrieved. (required)
     * @param language The ISO 6391 language code of the top news. The language must be one spoken in the source-country. (required)
     * @param date The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)
     * @param headlinesOnly Whether to only return basic information such as id, title, and url of the news. (optional)
     * @return TopNews200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/top-news/">Top News Documentation</a>
     */
    public TopNews200Response topNews(String sourceCountry, String language, String date, Boolean headlinesOnly) throws ApiException {
        ApiResponse<TopNews200Response> localVarResp = topNewsWithHttpInfo(sourceCountry, language, date, headlinesOnly);
        return localVarResp.getData();
    }

    /**
     * Top News
     * Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
     * @param sourceCountry The ISO 3166 country code of the country for which top news should be retrieved. (required)
     * @param language The ISO 6391 language code of the top news. The language must be one spoken in the source-country. (required)
     * @param date The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)
     * @param headlinesOnly Whether to only return basic information such as id, title, and url of the news. (optional)
     * @return ApiResponse&lt;TopNews200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/top-news/">Top News Documentation</a>
     */
    public ApiResponse<TopNews200Response> topNewsWithHttpInfo(String sourceCountry, String language, String date, Boolean headlinesOnly) throws ApiException {
        okhttp3.Call localVarCall = topNewsValidateBeforeCall(sourceCountry, language, date, headlinesOnly, null);
        Type localVarReturnType = new TypeToken<TopNews200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Top News (asynchronously)
     * Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
     * @param sourceCountry The ISO 3166 country code of the country for which top news should be retrieved. (required)
     * @param language The ISO 6391 language code of the top news. The language must be one spoken in the source-country. (required)
     * @param date The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)
     * @param headlinesOnly Whether to only return basic information such as id, title, and url of the news. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs/top-news/">Top News Documentation</a>
     */
    public okhttp3.Call topNewsAsync(String sourceCountry, String language, String date, Boolean headlinesOnly, final ApiCallback<TopNews200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = topNewsValidateBeforeCall(sourceCountry, language, date, headlinesOnly, _callback);
        Type localVarReturnType = new TypeToken<TopNews200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
