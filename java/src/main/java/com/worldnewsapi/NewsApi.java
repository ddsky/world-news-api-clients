/*
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.worldnewsapi;

import com.worldnewsapi.client.ApiCallback;
import com.worldnewsapi.client.ApiClient;
import com.worldnewsapi.client.ApiException;
import com.worldnewsapi.client.ApiResponse;
import com.worldnewsapi.client.Configuration;
import com.worldnewsapi.client.Pair;
import com.worldnewsapi.client.ProgressRequestBody;
import com.worldnewsapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.worldnewsapi.client.model.ExtractLinksResponse;
import com.worldnewsapi.client.model.ExtractNewsResponse;
import com.worldnewsapi.client.model.GeoCoordinatesResponse;
import com.worldnewsapi.client.model.SearchNewsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extractNews
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extracted news. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractNewsCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extract-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractNewsValidateBeforeCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractNews(Async)");
        }

        // verify the required parameter 'analyze' is set
        if (analyze == null) {
            throw new ApiException("Missing the required parameter 'analyze' when calling extractNews(Async)");
        }

        return extractNewsCall(url, analyze, _callback);

    }

    /**
     * Extract News
     * Extract a news entry from a news site.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ExtractNewsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extracted news. </td><td>  -  </td></tr>
     </table>
     */
    public ExtractNewsResponse extractNews(String url, Boolean analyze) throws ApiException {
        ApiResponse<ExtractNewsResponse> localVarResp = extractNewsWithHttpInfo(url, analyze);
        return localVarResp.getData();
    }

    /**
     * Extract News
     * Extract a news entry from a news site.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ApiResponse&lt;ExtractNewsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extracted news. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtractNewsResponse> extractNewsWithHttpInfo(String url, Boolean analyze) throws ApiException {
        okhttp3.Call localVarCall = extractNewsValidateBeforeCall(url, analyze, null);
        Type localVarReturnType = new TypeToken<ExtractNewsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract News (asynchronously)
     * Extract a news entry from a news site.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extracted news. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractNewsAsync(String url, Boolean analyze, final ApiCallback<ExtractNewsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractNewsValidateBeforeCall(url, analyze, _callback);
        Type localVarReturnType = new TypeToken<ExtractNewsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractNewsLinks
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param prefix The prefix the news links must start with. (optional)
     * @param subDomain Whether to include links to news on sub-domains. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#Extract-News-Links">Extract News Links Documentation</a>
     */
    public okhttp3.Call extractNewsLinksCall(String url, String apiKey, String prefix, Boolean subDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extract-news-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (subDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub-domain", subDomain));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractNewsLinksValidateBeforeCall(String url, String apiKey, String prefix, Boolean subDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractNewsLinks(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling extractNewsLinks(Async)");
        }

        return extractNewsLinksCall(url, apiKey, prefix, subDomain, _callback);

    }

    /**
     * Extract News Links
     * Extract a news links from a news website. 
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param prefix The prefix the news links must start with. (optional)
     * @param subDomain Whether to include links to news on sub-domains. (optional)
     * @return ExtractLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#Extract-News-Links">Extract News Links Documentation</a>
     */
    public ExtractLinksResponse extractNewsLinks(String url, String apiKey, String prefix, Boolean subDomain) throws ApiException {
        ApiResponse<ExtractLinksResponse> localVarResp = extractNewsLinksWithHttpInfo(url, apiKey, prefix, subDomain);
        return localVarResp.getData();
    }

    /**
     * Extract News Links
     * Extract a news links from a news website. 
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param prefix The prefix the news links must start with. (optional)
     * @param subDomain Whether to include links to news on sub-domains. (optional)
     * @return ApiResponse&lt;ExtractLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#Extract-News-Links">Extract News Links Documentation</a>
     */
    public ApiResponse<ExtractLinksResponse> extractNewsLinksWithHttpInfo(String url, String apiKey, String prefix, Boolean subDomain) throws ApiException {
        okhttp3.Call localVarCall = extractNewsLinksValidateBeforeCall(url, apiKey, prefix, subDomain, null);
        Type localVarReturnType = new TypeToken<ExtractLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract News Links (asynchronously)
     * Extract a news links from a news website. 
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param prefix The prefix the news links must start with. (optional)
     * @param subDomain Whether to include links to news on sub-domains. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#Extract-News-Links">Extract News Links Documentation</a>
     */
    public okhttp3.Call extractNewsLinksAsync(String url, String apiKey, String prefix, Boolean subDomain, final ApiCallback<ExtractLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractNewsLinksValidateBeforeCall(url, apiKey, prefix, subDomain, _callback);
        Type localVarReturnType = new TypeToken<ExtractLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoCoordinates
     * @param location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The coordinates of the location. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geoCoordinatesCall(String location, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo-coordinates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoCoordinatesValidateBeforeCall(String location, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling geoCoordinates(Async)");
        }

        return geoCoordinatesCall(location, _callback);

    }

    /**
     * Get Geo Coordinates
     * Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
     * @param location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @return GeoCoordinatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The coordinates of the location. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GeoCoordinatesResponse geoCoordinates(String location) throws ApiException {
        ApiResponse<GeoCoordinatesResponse> localVarResp = geoCoordinatesWithHttpInfo(location);
        return localVarResp.getData();
    }

    /**
     * Get Geo Coordinates
     * Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
     * @param location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @return ApiResponse&lt;GeoCoordinatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The coordinates of the location. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoCoordinatesResponse> geoCoordinatesWithHttpInfo(String location) throws ApiException {
        okhttp3.Call localVarCall = geoCoordinatesValidateBeforeCall(location, null);
        Type localVarReturnType = new TypeToken<GeoCoordinatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Geo Coordinates (asynchronously)
     * Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
     * @param location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The coordinates of the location. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geoCoordinatesAsync(String location, final ApiCallback<GeoCoordinatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoCoordinatesValidateBeforeCall(location, _callback);
        Type localVarReturnType = new TypeToken<GeoCoordinatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newsWebsiteToRSSFeed
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param extractNews Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#News-Website-to-RSS-Feed">News Website to RSS Feed Documentation</a>
     */
    public okhttp3.Call newsWebsiteToRSSFeedCall(String url, String apiKey, Boolean extractNews, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feed.rss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (extractNews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extract-news", extractNews));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newsWebsiteToRSSFeedValidateBeforeCall(String url, String apiKey, Boolean extractNews, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling newsWebsiteToRSSFeed(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling newsWebsiteToRSSFeed(Async)");
        }

        return newsWebsiteToRSSFeedCall(url, apiKey, extractNews, _callback);

    }

    /**
     * News Website to RSS Feed
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param extractNews Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#News-Website-to-RSS-Feed">News Website to RSS Feed Documentation</a>
     */
    public Object newsWebsiteToRSSFeed(String url, String apiKey, Boolean extractNews) throws ApiException {
        ApiResponse<Object> localVarResp = newsWebsiteToRSSFeedWithHttpInfo(url, apiKey, extractNews);
        return localVarResp.getData();
    }

    /**
     * News Website to RSS Feed
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param extractNews Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#News-Website-to-RSS-Feed">News Website to RSS Feed Documentation</a>
     */
    public ApiResponse<Object> newsWebsiteToRSSFeedWithHttpInfo(String url, String apiKey, Boolean extractNews) throws ApiException {
        okhttp3.Call localVarCall = newsWebsiteToRSSFeedValidateBeforeCall(url, apiKey, extractNews, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * News Website to RSS Feed (asynchronously)
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
     * @param url The url from which links should be extracted. (required)
     * @param apiKey Your API key. (required)
     * @param extractNews Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://worldnewsapi.com/docs#News-Website-to-RSS-Feed">News Website to RSS Feed Documentation</a>
     */
    public okhttp3.Call newsWebsiteToRSSFeedAsync(String url, String apiKey, Boolean extractNews, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = newsWebsiteToRSSFeedValidateBeforeCall(url, apiKey, extractNews, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchNews
     * @param text The text to match in the news content. (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param offset The number of news to skip in range [0,1000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param sort The sorting criteria. (optional)
     * @param sortDirection Whether to sort ascending or descending. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of news. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchNewsCall(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, Integer offset, Integer number, String sort, String sortDirection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (sourceCountries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-countries", sourceCountries));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (minSentiment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-sentiment", minSentiment));
        }

        if (maxSentiment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-sentiment", maxSentiment));
        }

        if (earliestPublishDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earliest-publish-date", earliestPublishDate));
        }

        if (latestPublishDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest-publish-date", latestPublishDate));
        }

        if (newsSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("news-sources", newsSources));
        }

        if (authors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authors", authors));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (locationFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location-filter", locationFilter));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-direction", sortDirection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchNewsValidateBeforeCall(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, Integer offset, Integer number, String sort, String sortDirection, final ApiCallback _callback) throws ApiException {
        return searchNewsCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection, _callback);

    }

    /**
     * Search News
     * Search for news.
     * @param text The text to match in the news content. (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param offset The number of news to skip in range [0,1000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param sort The sorting criteria. (optional)
     * @param sortDirection Whether to sort ascending or descending. (optional)
     * @return SearchNewsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of news. </td><td>  -  </td></tr>
     </table>
     */
    public SearchNewsResponse searchNews(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, Integer offset, Integer number, String sort, String sortDirection) throws ApiException {
        ApiResponse<SearchNewsResponse> localVarResp = searchNewsWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection);
        return localVarResp.getData();
    }

    /**
     * Search News
     * Search for news.
     * @param text The text to match in the news content. (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param offset The number of news to skip in range [0,1000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param sort The sorting criteria. (optional)
     * @param sortDirection Whether to sort ascending or descending. (optional)
     * @return ApiResponse&lt;SearchNewsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of news. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchNewsResponse> searchNewsWithHttpInfo(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, Integer offset, Integer number, String sort, String sortDirection) throws ApiException {
        okhttp3.Call localVarCall = searchNewsValidateBeforeCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection, null);
        Type localVarReturnType = new TypeToken<SearchNewsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search News (asynchronously)
     * Search for news.
     * @param text The text to match in the news content. (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param offset The number of news to skip in range [0,1000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param sort The sorting criteria. (optional)
     * @param sortDirection Whether to sort ascending or descending. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of news. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchNewsAsync(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, Integer offset, Integer number, String sort, String sortDirection, final ApiCallback<SearchNewsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchNewsValidateBeforeCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection, _callback);
        Type localVarReturnType = new TypeToken<SearchNewsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
