{-
   World News API
   The world's news wrapped into a single API.

   The version of the OpenAPI document: 1.1
   Contact: mail@worldnewsapi.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( ExtractLinksResponse
    , ExtractNewsResponse
    , GeoCoordinatesResponse
    , News
    , NewsArticle
    , SearchNewsResponse
    , encodeExtractLinksResponse
    , encodeExtractNewsResponse
    , encodeGeoCoordinatesResponse
    , encodeNews
    , encodeNewsArticle
    , encodeSearchNewsResponse
    , extractLinksResponseDecoder
    , extractNewsResponseDecoder
    , geoCoordinatesResponseDecoder
    , newsDecoder
    , newsArticleDecoder
    , searchNewsResponseDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias ExtractLinksResponse =
    { newsLinks : Maybe ( List String )
    }


type alias ExtractNewsResponse =
    { title : Maybe String
    , text : Maybe String
    , url : Maybe String
    , image : Maybe String
    , author : Maybe String
    , language : Maybe String
    , sourceCountry : Maybe String
    , sentiment : Maybe Float
    }


type alias GeoCoordinatesResponse =
    { latitude : Float
    , longitude : Float
    , city : Maybe String
    }


{-| A news entry.
-}
type alias News =
    { id : Maybe Int
    , title : Maybe String
    , text : Maybe String
    , summary : Maybe String
    , url : Maybe String
    , image : Maybe String
    , publishDate : Maybe String
    , author : Maybe String
    , language : Maybe String
    , sourceCountry : Maybe String
    , sentiment : Maybe Float
    }


type alias NewsArticle =
    { id : Maybe Int
    , title : Maybe String
    , text : Maybe String
    , summary : Maybe String
    , url : Maybe String
    , image : Maybe String
    , publishDate : Maybe String
    , author : Maybe String
    , language : Maybe String
    , sourceCountry : Maybe String
    , sentiment : Maybe Float
    }


type alias SearchNewsResponse =
    { offset : Int
    , number : Int
    , available : Int
    , news : List NewsArticle
    }


-- ENCODER


encodeExtractLinksResponse : ExtractLinksResponse -> Json.Encode.Value
encodeExtractLinksResponse =
    encodeObject << encodeExtractLinksResponsePairs


encodeExtractLinksResponseWithTag : ( String, String ) -> ExtractLinksResponse -> Json.Encode.Value
encodeExtractLinksResponseWithTag (tagField, tag) model =
    encodeObject (encodeExtractLinksResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtractLinksResponsePairs : ExtractLinksResponse -> List EncodedField
encodeExtractLinksResponsePairs model =
    let
        pairs =
            [ maybeEncode "news_links" (Json.Encode.list Json.Encode.string) model.newsLinks
            ]
    in
    pairs


encodeExtractNewsResponse : ExtractNewsResponse -> Json.Encode.Value
encodeExtractNewsResponse =
    encodeObject << encodeExtractNewsResponsePairs


encodeExtractNewsResponseWithTag : ( String, String ) -> ExtractNewsResponse -> Json.Encode.Value
encodeExtractNewsResponseWithTag (tagField, tag) model =
    encodeObject (encodeExtractNewsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtractNewsResponsePairs : ExtractNewsResponse -> List EncodedField
encodeExtractNewsResponsePairs model =
    let
        pairs =
            [ maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncodeNullable "image" Json.Encode.string model.image
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "language" Json.Encode.string model.language
            , maybeEncode "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


encodeGeoCoordinatesResponse : GeoCoordinatesResponse -> Json.Encode.Value
encodeGeoCoordinatesResponse =
    encodeObject << encodeGeoCoordinatesResponsePairs


encodeGeoCoordinatesResponseWithTag : ( String, String ) -> GeoCoordinatesResponse -> Json.Encode.Value
encodeGeoCoordinatesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGeoCoordinatesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGeoCoordinatesResponsePairs : GeoCoordinatesResponse -> List EncodedField
encodeGeoCoordinatesResponsePairs model =
    let
        pairs =
            [ encode "latitude" Json.Encode.float model.latitude
            , encode "longitude" Json.Encode.float model.longitude
            , maybeEncode "city" Json.Encode.string model.city
            ]
    in
    pairs


encodeNews : News -> Json.Encode.Value
encodeNews =
    encodeObject << encodeNewsPairs


encodeNewsWithTag : ( String, String ) -> News -> Json.Encode.Value
encodeNewsWithTag (tagField, tag) model =
    encodeObject (encodeNewsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNewsPairs : News -> List EncodedField
encodeNewsPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "summary" Json.Encode.string model.summary
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncodeNullable "image" Json.Encode.string model.image
            , maybeEncode "publish_date" Json.Encode.string model.publishDate
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "language" Json.Encode.string model.language
            , maybeEncode "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


encodeNewsArticle : NewsArticle -> Json.Encode.Value
encodeNewsArticle =
    encodeObject << encodeNewsArticlePairs


encodeNewsArticleWithTag : ( String, String ) -> NewsArticle -> Json.Encode.Value
encodeNewsArticleWithTag (tagField, tag) model =
    encodeObject (encodeNewsArticlePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNewsArticlePairs : NewsArticle -> List EncodedField
encodeNewsArticlePairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "summary" Json.Encode.string model.summary
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncodeNullable "image" Json.Encode.string model.image
            , maybeEncode "publish_date" Json.Encode.string model.publishDate
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "language" Json.Encode.string model.language
            , maybeEncode "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


encodeSearchNewsResponse : SearchNewsResponse -> Json.Encode.Value
encodeSearchNewsResponse =
    encodeObject << encodeSearchNewsResponsePairs


encodeSearchNewsResponseWithTag : ( String, String ) -> SearchNewsResponse -> Json.Encode.Value
encodeSearchNewsResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchNewsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchNewsResponsePairs : SearchNewsResponse -> List EncodedField
encodeSearchNewsResponsePairs model =
    let
        pairs =
            [ encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            , encode "available" Json.Encode.int model.available
            , encode "news" (Json.Encode.list encodeNewsArticle) model.news
            ]
    in
    pairs


-- DECODER


extractLinksResponseDecoder : Json.Decode.Decoder ExtractLinksResponse
extractLinksResponseDecoder =
    Json.Decode.succeed ExtractLinksResponse
        |> maybeDecode "news_links" (Json.Decode.list Json.Decode.string) Nothing


extractNewsResponseDecoder : Json.Decode.Decoder ExtractNewsResponse
extractNewsResponseDecoder =
    Json.Decode.succeed ExtractNewsResponse
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecodeNullable "image" Json.Decode.string Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "language" Json.Decode.string Nothing
        |> maybeDecode "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing


geoCoordinatesResponseDecoder : Json.Decode.Decoder GeoCoordinatesResponse
geoCoordinatesResponseDecoder =
    Json.Decode.succeed GeoCoordinatesResponse
        |> decode "latitude" Json.Decode.float 
        |> decode "longitude" Json.Decode.float 
        |> maybeDecode "city" Json.Decode.string Nothing


newsDecoder : Json.Decode.Decoder News
newsDecoder =
    Json.Decode.succeed News
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "summary" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecodeNullable "image" Json.Decode.string Nothing
        |> maybeDecode "publish_date" Json.Decode.string Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "language" Json.Decode.string Nothing
        |> maybeDecode "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing


newsArticleDecoder : Json.Decode.Decoder NewsArticle
newsArticleDecoder =
    Json.Decode.succeed NewsArticle
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "summary" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecodeNullable "image" Json.Decode.string Nothing
        |> maybeDecode "publish_date" Json.Decode.string Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "language" Json.Decode.string Nothing
        |> maybeDecode "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing


searchNewsResponseDecoder : Json.Decode.Decoder SearchNewsResponse
searchNewsResponseDecoder =
    Json.Decode.succeed SearchNewsResponse
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 
        |> decode "available" Json.Decode.int 
        |> decode "news" (Json.Decode.list newsArticleDecoder) 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f