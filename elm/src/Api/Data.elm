{-
   World News API
   The world's news wrapped into a single API.

   The version of the OpenAPI document: 1.1.1
   Contact: mail@worldnewsapi.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( ExtractNews200Response
    , ExtractNewsLinks200Response
    , GetGeoCoordinates200Response
    , SearchNews200Response
    , SearchNews200ResponseNewsInner
    , TopNews200Response
    , TopNews200ResponseTopNewsInner
    , TopNews200ResponseTopNewsInnerNewsInner
    , encodeExtractNews200Response
    , encodeExtractNewsLinks200Response
    , encodeGetGeoCoordinates200Response
    , encodeSearchNews200Response
    , encodeSearchNews200ResponseNewsInner
    , encodeTopNews200Response
    , encodeTopNews200ResponseTopNewsInner
    , encodeTopNews200ResponseTopNewsInnerNewsInner
    , extractNews200ResponseDecoder
    , extractNewsLinks200ResponseDecoder
    , getGeoCoordinates200ResponseDecoder
    , searchNews200ResponseDecoder
    , searchNews200ResponseNewsInnerDecoder
    , topNews200ResponseDecoder
    , topNews200ResponseTopNewsInnerDecoder
    , topNews200ResponseTopNewsInnerNewsInnerDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias ExtractNews200Response =
    { title : Maybe String
    , text : Maybe String
    , url : Maybe String
    , image : Maybe String
    , publishDate : Maybe String
    , author : Maybe String
    , language : Maybe String
    , sourceCountry : Maybe String
    , sentiment : Maybe Float
    }


type alias ExtractNewsLinks200Response =
    { newsLinks : Maybe ( List Maybe String )
    }


type alias GetGeoCoordinates200Response =
    { latitude : Maybe Float
    , longitude : Maybe Float
    , city : Maybe String
    }


type alias SearchNews200Response =
    { offset : Maybe Int
    , number : Maybe Int
    , available : Maybe Int
    , news : Maybe ( List SearchNews200ResponseNewsInner )
    }


type alias SearchNews200ResponseNewsInner =
    { summary : Maybe String
    , image : Maybe String
    , sentiment : Maybe Float
    , sourceCountry : Maybe String
    , language : Maybe String
    , id : Maybe Int
    , text : Maybe String
    , title : Maybe String
    , publishDate : Maybe String
    , url : Maybe String
    , authors : Maybe ( List Maybe String )
    }


type alias TopNews200Response =
    { topNews : Maybe ( List TopNews200ResponseTopNewsInner )
    , language : Maybe String
    , country : Maybe String
    }


type alias TopNews200ResponseTopNewsInner =
    { news : Maybe ( List TopNews200ResponseTopNewsInnerNewsInner )
    }


type alias TopNews200ResponseTopNewsInnerNewsInner =
    { summary : Maybe String
    , image : Maybe String
    , id : Maybe Int
    , text : Maybe String
    , title : Maybe String
    , publishDate : Maybe String
    , url : Maybe String
    , authors : Maybe ( List Maybe String )
    }


-- ENCODER


encodeExtractNews200Response : ExtractNews200Response -> Json.Encode.Value
encodeExtractNews200Response =
    encodeObject << encodeExtractNews200ResponsePairs


encodeExtractNews200ResponseWithTag : ( String, String ) -> ExtractNews200Response -> Json.Encode.Value
encodeExtractNews200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeExtractNews200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtractNews200ResponsePairs : ExtractNews200Response -> List EncodedField
encodeExtractNews200ResponsePairs model =
    let
        pairs =
            [ maybeEncodeNullable "title" Json.Encode.string model.title
            , maybeEncodeNullable "text" Json.Encode.string model.text
            , maybeEncodeNullable "url" Json.Encode.string model.url
            , maybeEncodeNullable "image" Json.Encode.string model.image
            , maybeEncodeNullable "publish_date" Json.Encode.string model.publishDate
            , maybeEncodeNullable "author" Json.Encode.string model.author
            , maybeEncodeNullable "language" Json.Encode.string model.language
            , maybeEncodeNullable "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


encodeExtractNewsLinks200Response : ExtractNewsLinks200Response -> Json.Encode.Value
encodeExtractNewsLinks200Response =
    encodeObject << encodeExtractNewsLinks200ResponsePairs


encodeExtractNewsLinks200ResponseWithTag : ( String, String ) -> ExtractNewsLinks200Response -> Json.Encode.Value
encodeExtractNewsLinks200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeExtractNewsLinks200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtractNewsLinks200ResponsePairs : ExtractNewsLinks200Response -> List EncodedField
encodeExtractNewsLinks200ResponsePairs model =
    let
        pairs =
            [ maybeEncode "news_links" (Json.Encode.list Json.Encode.string) model.newsLinks
            ]
    in
    pairs


encodeGetGeoCoordinates200Response : GetGeoCoordinates200Response -> Json.Encode.Value
encodeGetGeoCoordinates200Response =
    encodeObject << encodeGetGeoCoordinates200ResponsePairs


encodeGetGeoCoordinates200ResponseWithTag : ( String, String ) -> GetGeoCoordinates200Response -> Json.Encode.Value
encodeGetGeoCoordinates200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetGeoCoordinates200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGeoCoordinates200ResponsePairs : GetGeoCoordinates200Response -> List EncodedField
encodeGetGeoCoordinates200ResponsePairs model =
    let
        pairs =
            [ maybeEncode "latitude" Json.Encode.float model.latitude
            , maybeEncode "longitude" Json.Encode.float model.longitude
            , maybeEncodeNullable "city" Json.Encode.string model.city
            ]
    in
    pairs


encodeSearchNews200Response : SearchNews200Response -> Json.Encode.Value
encodeSearchNews200Response =
    encodeObject << encodeSearchNews200ResponsePairs


encodeSearchNews200ResponseWithTag : ( String, String ) -> SearchNews200Response -> Json.Encode.Value
encodeSearchNews200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchNews200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchNews200ResponsePairs : SearchNews200Response -> List EncodedField
encodeSearchNews200ResponsePairs model =
    let
        pairs =
            [ maybeEncode "offset" Json.Encode.int model.offset
            , maybeEncode "number" Json.Encode.int model.number
            , maybeEncode "available" Json.Encode.int model.available
            , maybeEncode "news" (Json.Encode.list encodeSearchNews200ResponseNewsInner) model.news
            ]
    in
    pairs


encodeSearchNews200ResponseNewsInner : SearchNews200ResponseNewsInner -> Json.Encode.Value
encodeSearchNews200ResponseNewsInner =
    encodeObject << encodeSearchNews200ResponseNewsInnerPairs


encodeSearchNews200ResponseNewsInnerWithTag : ( String, String ) -> SearchNews200ResponseNewsInner -> Json.Encode.Value
encodeSearchNews200ResponseNewsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchNews200ResponseNewsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchNews200ResponseNewsInnerPairs : SearchNews200ResponseNewsInner -> List EncodedField
encodeSearchNews200ResponseNewsInnerPairs model =
    let
        pairs =
            [ maybeEncodeNullable "summary" Json.Encode.string model.summary
            , maybeEncodeNullable "image" Json.Encode.string model.image
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            , maybeEncodeNullable "source_country" Json.Encode.string model.sourceCountry
            , maybeEncodeNullable "language" Json.Encode.string model.language
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncodeNullable "text" Json.Encode.string model.text
            , maybeEncodeNullable "title" Json.Encode.string model.title
            , maybeEncodeNullable "publish_date" Json.Encode.string model.publishDate
            , maybeEncodeNullable "url" Json.Encode.string model.url
            , maybeEncode "authors" (Json.Encode.list Json.Encode.string) model.authors
            ]
    in
    pairs


encodeTopNews200Response : TopNews200Response -> Json.Encode.Value
encodeTopNews200Response =
    encodeObject << encodeTopNews200ResponsePairs


encodeTopNews200ResponseWithTag : ( String, String ) -> TopNews200Response -> Json.Encode.Value
encodeTopNews200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeTopNews200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTopNews200ResponsePairs : TopNews200Response -> List EncodedField
encodeTopNews200ResponsePairs model =
    let
        pairs =
            [ maybeEncode "top_news" (Json.Encode.list encodeTopNews200ResponseTopNewsInner) model.topNews
            , maybeEncodeNullable "language" Json.Encode.string model.language
            , maybeEncodeNullable "country" Json.Encode.string model.country
            ]
    in
    pairs


encodeTopNews200ResponseTopNewsInner : TopNews200ResponseTopNewsInner -> Json.Encode.Value
encodeTopNews200ResponseTopNewsInner =
    encodeObject << encodeTopNews200ResponseTopNewsInnerPairs


encodeTopNews200ResponseTopNewsInnerWithTag : ( String, String ) -> TopNews200ResponseTopNewsInner -> Json.Encode.Value
encodeTopNews200ResponseTopNewsInnerWithTag (tagField, tag) model =
    encodeObject (encodeTopNews200ResponseTopNewsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTopNews200ResponseTopNewsInnerPairs : TopNews200ResponseTopNewsInner -> List EncodedField
encodeTopNews200ResponseTopNewsInnerPairs model =
    let
        pairs =
            [ maybeEncode "news" (Json.Encode.list encodeTopNews200ResponseTopNewsInnerNewsInner) model.news
            ]
    in
    pairs


encodeTopNews200ResponseTopNewsInnerNewsInner : TopNews200ResponseTopNewsInnerNewsInner -> Json.Encode.Value
encodeTopNews200ResponseTopNewsInnerNewsInner =
    encodeObject << encodeTopNews200ResponseTopNewsInnerNewsInnerPairs


encodeTopNews200ResponseTopNewsInnerNewsInnerWithTag : ( String, String ) -> TopNews200ResponseTopNewsInnerNewsInner -> Json.Encode.Value
encodeTopNews200ResponseTopNewsInnerNewsInnerWithTag (tagField, tag) model =
    encodeObject (encodeTopNews200ResponseTopNewsInnerNewsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTopNews200ResponseTopNewsInnerNewsInnerPairs : TopNews200ResponseTopNewsInnerNewsInner -> List EncodedField
encodeTopNews200ResponseTopNewsInnerNewsInnerPairs model =
    let
        pairs =
            [ maybeEncodeNullable "summary" Json.Encode.string model.summary
            , maybeEncodeNullable "image" Json.Encode.string model.image
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncodeNullable "text" Json.Encode.string model.text
            , maybeEncodeNullable "title" Json.Encode.string model.title
            , maybeEncodeNullable "publish_date" Json.Encode.string model.publishDate
            , maybeEncodeNullable "url" Json.Encode.string model.url
            , maybeEncode "authors" (Json.Encode.list Json.Encode.string) model.authors
            ]
    in
    pairs


-- DECODER


extractNews200ResponseDecoder : Json.Decode.Decoder ExtractNews200Response
extractNews200ResponseDecoder =
    Json.Decode.succeed ExtractNews200Response
        |> maybeDecodeNullable "title" Json.Decode.string Nothing
        |> maybeDecodeNullable "text" Json.Decode.string Nothing
        |> maybeDecodeNullable "url" Json.Decode.string Nothing
        |> maybeDecodeNullable "image" Json.Decode.string Nothing
        |> maybeDecodeNullable "publish_date" Json.Decode.string Nothing
        |> maybeDecodeNullable "author" Json.Decode.string Nothing
        |> maybeDecodeNullable "language" Json.Decode.string Nothing
        |> maybeDecodeNullable "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing


extractNewsLinks200ResponseDecoder : Json.Decode.Decoder ExtractNewsLinks200Response
extractNewsLinks200ResponseDecoder =
    Json.Decode.succeed ExtractNewsLinks200Response
        |> maybeDecode "news_links" (Json.Decode.list Json.Decode.string) Nothing


getGeoCoordinates200ResponseDecoder : Json.Decode.Decoder GetGeoCoordinates200Response
getGeoCoordinates200ResponseDecoder =
    Json.Decode.succeed GetGeoCoordinates200Response
        |> maybeDecode "latitude" Json.Decode.float Nothing
        |> maybeDecode "longitude" Json.Decode.float Nothing
        |> maybeDecodeNullable "city" Json.Decode.string Nothing


searchNews200ResponseDecoder : Json.Decode.Decoder SearchNews200Response
searchNews200ResponseDecoder =
    Json.Decode.succeed SearchNews200Response
        |> maybeDecode "offset" Json.Decode.int Nothing
        |> maybeDecode "number" Json.Decode.int Nothing
        |> maybeDecode "available" Json.Decode.int Nothing
        |> maybeDecode "news" (Json.Decode.list searchNews200ResponseNewsInnerDecoder) Nothing


searchNews200ResponseNewsInnerDecoder : Json.Decode.Decoder SearchNews200ResponseNewsInner
searchNews200ResponseNewsInnerDecoder =
    Json.Decode.succeed SearchNews200ResponseNewsInner
        |> maybeDecodeNullable "summary" Json.Decode.string Nothing
        |> maybeDecodeNullable "image" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing
        |> maybeDecodeNullable "source_country" Json.Decode.string Nothing
        |> maybeDecodeNullable "language" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecodeNullable "text" Json.Decode.string Nothing
        |> maybeDecodeNullable "title" Json.Decode.string Nothing
        |> maybeDecodeNullable "publish_date" Json.Decode.string Nothing
        |> maybeDecodeNullable "url" Json.Decode.string Nothing
        |> maybeDecode "authors" (Json.Decode.list Json.Decode.string) Nothing


topNews200ResponseDecoder : Json.Decode.Decoder TopNews200Response
topNews200ResponseDecoder =
    Json.Decode.succeed TopNews200Response
        |> maybeDecode "top_news" (Json.Decode.list topNews200ResponseTopNewsInnerDecoder) Nothing
        |> maybeDecodeNullable "language" Json.Decode.string Nothing
        |> maybeDecodeNullable "country" Json.Decode.string Nothing


topNews200ResponseTopNewsInnerDecoder : Json.Decode.Decoder TopNews200ResponseTopNewsInner
topNews200ResponseTopNewsInnerDecoder =
    Json.Decode.succeed TopNews200ResponseTopNewsInner
        |> maybeDecode "news" (Json.Decode.list topNews200ResponseTopNewsInnerNewsInnerDecoder) Nothing


topNews200ResponseTopNewsInnerNewsInnerDecoder : Json.Decode.Decoder TopNews200ResponseTopNewsInnerNewsInner
topNews200ResponseTopNewsInnerNewsInnerDecoder =
    Json.Decode.succeed TopNews200ResponseTopNewsInnerNewsInner
        |> maybeDecodeNullable "summary" Json.Decode.string Nothing
        |> maybeDecodeNullable "image" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecodeNullable "text" Json.Decode.string Nothing
        |> maybeDecodeNullable "title" Json.Decode.string Nothing
        |> maybeDecodeNullable "publish_date" Json.Decode.string Nothing
        |> maybeDecodeNullable "url" Json.Decode.string Nothing
        |> maybeDecode "authors" (Json.Decode.list Json.Decode.string) Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f