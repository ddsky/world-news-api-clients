{-
   World News API
   The world's news wrapped into a single API.

   The version of the OpenAPI document: 1.0
   Contact: mail@worldnewsapi.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( InlineResponse200
    , InlineResponse2001
    , InlineResponse2002
    , InlineResponse200News
    , News
    , encodeInlineResponse200
    , encodeInlineResponse2001
    , encodeInlineResponse2002
    , encodeInlineResponse200News
    , encodeNews
    , inlineResponse200Decoder
    , inlineResponse2001Decoder
    , inlineResponse2002Decoder
    , inlineResponse200NewsDecoder
    , newsDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias InlineResponse200 =
    { offset : Int
, number : Int
, available : Int
, news : List (InlineResponse200News)
}


type alias InlineResponse2001 =
    { title : Maybe String
, text : Maybe String
, url : Maybe String
, image : Maybe String
, author : Maybe String
, language : Maybe String
, sourceCountry : Maybe String
, sentiment : Maybe Float
}


type alias InlineResponse2002 =
    { latitude : Float
, longitude : Float
, city : Maybe String
}


type alias InlineResponse200News =
    { id : Maybe Int
, title : Maybe String
, text : Maybe String
, summary : Maybe String
, url : Maybe String
, image : Maybe String
, author : Maybe String
, language : Maybe String
, sourceCountry : Maybe String
, sentiment : Maybe Float
}


{-| A news entry.
-}
type alias News =
    { id : Maybe Int
, title : Maybe String
, text : Maybe String
, summary : Maybe String
, url : Maybe String
, image : Maybe String
, publishDate : Maybe String
, author : Maybe String
, language : Maybe String
, sourceCountry : Maybe String
, sentiment : Maybe Float
}


-- ENCODER


encodeInlineResponse200 : InlineResponse200 -> Json.Encode.Value
encodeInlineResponse200 =
    encodeObject << encodeInlineResponse200Pairs


encodeInlineResponse200WithTag : ( String, String ) -> InlineResponse200 -> Json.Encode.Value
encodeInlineResponse200WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse200Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse200Pairs : InlineResponse200 -> List EncodedField
encodeInlineResponse200Pairs model =
    let
        pairs =
            [ encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            , encode "available" Json.Encode.int model.available
            , encode "news" (Json.Encode.list encodeInlineResponse200News) model.news
            ]
    in
    pairs


encodeInlineResponse2001 : InlineResponse2001 -> Json.Encode.Value
encodeInlineResponse2001 =
    encodeObject << encodeInlineResponse2001Pairs


encodeInlineResponse2001WithTag : ( String, String ) -> InlineResponse2001 -> Json.Encode.Value
encodeInlineResponse2001WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2001Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2001Pairs : InlineResponse2001 -> List EncodedField
encodeInlineResponse2001Pairs model =
    let
        pairs =
            [ maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "image" Json.Encode.string model.image
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "language" Json.Encode.string model.language
            , maybeEncode "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


encodeInlineResponse2002 : InlineResponse2002 -> Json.Encode.Value
encodeInlineResponse2002 =
    encodeObject << encodeInlineResponse2002Pairs


encodeInlineResponse2002WithTag : ( String, String ) -> InlineResponse2002 -> Json.Encode.Value
encodeInlineResponse2002WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse2002Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse2002Pairs : InlineResponse2002 -> List EncodedField
encodeInlineResponse2002Pairs model =
    let
        pairs =
            [ encode "latitude" Json.Encode.float model.latitude
            , encode "longitude" Json.Encode.float model.longitude
            , maybeEncode "city" Json.Encode.string model.city
            ]
    in
    pairs


encodeInlineResponse200News : InlineResponse200News -> Json.Encode.Value
encodeInlineResponse200News =
    encodeObject << encodeInlineResponse200NewsPairs


encodeInlineResponse200NewsWithTag : ( String, String ) -> InlineResponse200News -> Json.Encode.Value
encodeInlineResponse200NewsWithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse200NewsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse200NewsPairs : InlineResponse200News -> List EncodedField
encodeInlineResponse200NewsPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "summary" Json.Encode.string model.summary
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "image" Json.Encode.string model.image
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "language" Json.Encode.string model.language
            , maybeEncode "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


encodeNews : News -> Json.Encode.Value
encodeNews =
    encodeObject << encodeNewsPairs


encodeNewsWithTag : ( String, String ) -> News -> Json.Encode.Value
encodeNewsWithTag (tagField, tag) model =
    encodeObject (encodeNewsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNewsPairs : News -> List EncodedField
encodeNewsPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "summary" Json.Encode.string model.summary
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "image" Json.Encode.string model.image
            , maybeEncode "publish_date" Json.Encode.string model.publishDate
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "language" Json.Encode.string model.language
            , maybeEncode "source_country" Json.Encode.string model.sourceCountry
            , maybeEncode "sentiment" Json.Encode.float model.sentiment
            ]
    in
    pairs


-- DECODER


inlineResponse200Decoder : Json.Decode.Decoder InlineResponse200
inlineResponse200Decoder =
    Json.Decode.succeed InlineResponse200
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 
        |> decode "available" Json.Decode.int 
        |> decode "news" (Json.Decode.list inlineResponse200NewsDecoder) 


inlineResponse2001Decoder : Json.Decode.Decoder InlineResponse2001
inlineResponse2001Decoder =
    Json.Decode.succeed InlineResponse2001
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "image" Json.Decode.string Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "language" Json.Decode.string Nothing
        |> maybeDecode "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing


inlineResponse2002Decoder : Json.Decode.Decoder InlineResponse2002
inlineResponse2002Decoder =
    Json.Decode.succeed InlineResponse2002
        |> decode "latitude" Json.Decode.float 
        |> decode "longitude" Json.Decode.float 
        |> maybeDecode "city" Json.Decode.string Nothing


inlineResponse200NewsDecoder : Json.Decode.Decoder InlineResponse200News
inlineResponse200NewsDecoder =
    Json.Decode.succeed InlineResponse200News
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "summary" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "image" Json.Decode.string Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "language" Json.Decode.string Nothing
        |> maybeDecode "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing


newsDecoder : Json.Decode.Decoder News
newsDecoder =
    Json.Decode.succeed News
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "summary" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "image" Json.Decode.string Nothing
        |> maybeDecode "publish_date" Json.Decode.string Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "language" Json.Decode.string Nothing
        |> maybeDecode "source_country" Json.Decode.string Nothing
        |> maybeDecode "sentiment" Json.Decode.float Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f