# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.worldnewsapi.client.Api.News do
  @moduledoc """
  API calls for all endpoints tagged `News`.
  """

  alias com.worldnewsapi.client.Connection
  import com.worldnewsapi.client.RequestBuilder


  @doc """
  Extract News
  Extract a news entry from a news site.

  ## Parameters

  - connection (com.worldnewsapi.client.Connection): Connection to server
  - url (String.t): The url of the news.
  - analyze (boolean()): Whether to analyze the news (extract entities etc.)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.worldnewsapi.client.Model.InlineResponse2001.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_news(Tesla.Env.client, String.t, boolean(), keyword()) :: {:ok, com.worldnewsapi.client.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def extract_news(connection, url, analyze, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/extract-news")
    |> add_param(:query, :"url", url)
    |> add_param(:query, :"analyze", analyze)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.worldnewsapi.client.Model.InlineResponse2001{}}
    ])
  end

  @doc """
  Extract News Links
  Extract a news links from a news website. 

  ## Parameters

  - connection (com.worldnewsapi.client.Connection): Connection to server
  - url (String.t): The url from which links should be extracted.
  - api_key (String.t): Your API key.
  - opts (KeywordList): [optional] Optional parameters
    - :prefix (String.t): The prefix the news links must start with.
    - :sub_domain (boolean()): Whether to include links to news on sub-domains.
  ## Returns

  {:ok, com.worldnewsapi.client.Model.InlineResponse2002.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_news_links(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, com.worldnewsapi.client.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def extract_news_links(connection, url, api_key, opts \\ []) do
    optional_params = %{
      :"prefix" => :query,
      :"sub-domain" => :query
    }
    %{}
    |> method(:get)
    |> url("/extract-news-links")
    |> add_param(:query, :"url", url)
    |> add_param(:query, :"api-key", api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.worldnewsapi.client.Model.InlineResponse2002{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 429, false}
    ])
  end

  @doc """
  Get Geo Coordinates
  Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.

  ## Parameters

  - connection (com.worldnewsapi.client.Connection): Connection to server
  - location (String.t): The address or name of the location, e.g. Tokyo, Japan.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.worldnewsapi.client.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec geo_coordinates(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.worldnewsapi.client.Model.InlineResponse2003.t} | {:error, Tesla.Env.t}
  def geo_coordinates(connection, location, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/geo-coordinates")
    |> add_param(:query, :"location", location)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.worldnewsapi.client.Model.InlineResponse2003{}},
      { 404, false}
    ])
  end

  @doc """
  News Website to RSS Feed
  Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 

  ## Parameters

  - connection (com.worldnewsapi.client.Connection): Connection to server
  - url (String.t): The url from which links should be extracted.
  - api_key (String.t): Your API key.
  - opts (KeywordList): [optional] Optional parameters
    - :extract_news (boolean()): Whether extract news and add information such as description, publish date, and image to each item.
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec news_website_to_rss_feed(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def news_website_to_rss_feed(connection, url, api_key, opts \\ []) do
    optional_params = %{
      :"extract-news" => :query
    }
    %{}
    |> method(:get)
    |> url("/feed.rss")
    |> add_param(:query, :"url", url)
    |> add_param(:query, :"api-key", api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 429, false}
    ])
  end

  @doc """
  Search News
  Search for news.

  ## Parameters

  - connection (com.worldnewsapi.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :text (String.t): The text to match in the news content.
    - :source_countries (String.t): A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us.
    - :language (String.t): The ISO 6391 language code of the news, e.g. \"en\" for English.
    - :min_sentiment (float()): The minimal sentiment of the news in range [-1,1].
    - :max_sentiment (float()): The maximal sentiment of the news in range [-1,1].
    - :earliest_publish_date (String.t): The news must have been published after this date.
    - :latest_publish_date (String.t): The news must have been published before this date.
    - :news_sources (String.t): A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk
    - :authors (String.t): A comma-separated list of author names. Only news from any of the given authors will be returned.
    - :entities (String.t): Filter news by entities, e.g. ORG:Tesla.
    - :location_filter (String.t): Filter news by radius around a certain location. Format is \"latitude,longitude,radius in kilometers\", e.g. 51.050407, 13.737262, 100
    - :offset (integer()): The number of news to skip in range [0,1000]
    - :number (integer()): The number of news to return in range [1,100]
    - :sort (String.t): The sorting criteria.
    - :sort_direction (String.t): Whether to sort ascending or descending.
  ## Returns

  {:ok, com.worldnewsapi.client.Model.InlineResponse200.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_news(Tesla.Env.client, keyword()) :: {:ok, com.worldnewsapi.client.Model.InlineResponse200.t} | {:error, Tesla.Env.t}
  def search_news(connection, opts \\ []) do
    optional_params = %{
      :"text" => :query,
      :"source-countries" => :query,
      :"language" => :query,
      :"min-sentiment" => :query,
      :"max-sentiment" => :query,
      :"earliest-publish-date" => :query,
      :"latest-publish-date" => :query,
      :"news-sources" => :query,
      :"authors" => :query,
      :"entities" => :query,
      :"location-filter" => :query,
      :"offset" => :query,
      :"number" => :query,
      :"sort" => :query,
      :"sort-direction" => :query
    }
    %{}
    |> method(:get)
    |> url("/search-news")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.worldnewsapi.client.Model.InlineResponse200{}}
    ])
  end
end
