/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewsArticle from './NewsArticle';

/**
 * The SearchNewsResponse model module.
 * @module model/SearchNewsResponse
 * @version 1.1
 */
class SearchNewsResponse {
    /**
     * Constructs a new <code>SearchNewsResponse</code>.
     * @alias module:model/SearchNewsResponse
     * @param offset {Number} 
     * @param number {Number} 
     * @param available {Number} 
     * @param news {Array.<module:model/NewsArticle>} 
     */
    constructor(offset, number, available, news) { 
        
        SearchNewsResponse.initialize(this, offset, number, available, news);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, offset, number, available, news) { 
        obj['offset'] = offset;
        obj['number'] = number;
        obj['available'] = available;
        obj['news'] = news;
    }

    /**
     * Constructs a <code>SearchNewsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchNewsResponse} obj Optional instance to populate.
     * @return {module:model/SearchNewsResponse} The populated <code>SearchNewsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchNewsResponse();

            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('news')) {
                obj['news'] = ApiClient.convertToType(data['news'], [NewsArticle]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchNewsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchNewsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchNewsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['news']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['news'])) {
                throw new Error("Expected the field `news` to be an array in the JSON data but got " + data['news']);
            }
            // validate the optional field `news` (array)
            for (const item of data['news']) {
                NewsArticle.validateJSON(item);
            };
        }

        return true;
    }


}

SearchNewsResponse.RequiredProperties = ["offset", "number", "available", "news"];

/**
 * @member {Number} offset
 */
SearchNewsResponse.prototype['offset'] = undefined;

/**
 * @member {Number} number
 */
SearchNewsResponse.prototype['number'] = undefined;

/**
 * @member {Number} available
 */
SearchNewsResponse.prototype['available'] = undefined;

/**
 * @member {Array.<module:model/NewsArticle>} news
 */
SearchNewsResponse.prototype['news'] = undefined;






export default SearchNewsResponse;

