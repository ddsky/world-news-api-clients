/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoCoordinatesResponse model module.
 * @module model/GeoCoordinatesResponse
 * @version 1.1
 */
class GeoCoordinatesResponse {
    /**
     * Constructs a new <code>GeoCoordinatesResponse</code>.
     * @alias module:model/GeoCoordinatesResponse
     * @param latitude {Number} 
     * @param longitude {Number} 
     */
    constructor(latitude, longitude) { 
        
        GeoCoordinatesResponse.initialize(this, latitude, longitude);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, latitude, longitude) { 
        obj['latitude'] = latitude;
        obj['longitude'] = longitude;
    }

    /**
     * Constructs a <code>GeoCoordinatesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoCoordinatesResponse} obj Optional instance to populate.
     * @return {module:model/GeoCoordinatesResponse} The populated <code>GeoCoordinatesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoCoordinatesResponse();

            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoCoordinatesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoCoordinatesResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GeoCoordinatesResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }

        return true;
    }


}

GeoCoordinatesResponse.RequiredProperties = ["latitude", "longitude"];

/**
 * @member {Number} latitude
 */
GeoCoordinatesResponse.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
GeoCoordinatesResponse.prototype['longitude'] = undefined;

/**
 * @member {String} city
 */
GeoCoordinatesResponse.prototype['city'] = undefined;






export default GeoCoordinatesResponse;

