/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExtractLinksResponse from '../model/ExtractLinksResponse';
import ExtractNewsResponse from '../model/ExtractNewsResponse';
import GeoCoordinatesResponse from '../model/GeoCoordinatesResponse';
import SearchNewsResponse from '../model/SearchNewsResponse';

/**
* News service.
* @module api/NewsApi
* @version 1.1
*/
export default class NewsApi {

    /**
    * Constructs a new NewsApi. 
    * @alias module:api/NewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extractNews operation.
     * @callback module:api/NewsApi~extractNewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtractNewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract News
     * Extract a news entry from a news site.
     * @param {String} url The url of the news.
     * @param {Boolean} analyze Whether to analyze the news (extract entities etc.)
     * @param {module:api/NewsApi~extractNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtractNewsResponse}
     */
    extractNews(url, analyze, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling extractNews");
      }
      // verify the required parameter 'analyze' is set
      if (analyze === undefined || analyze === null) {
        throw new Error("Missing the required parameter 'analyze' when calling extractNews");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'analyze': analyze
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtractNewsResponse;
      return this.apiClient.callApi(
        '/extract-news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extractNewsLinks operation.
     * @callback module:api/NewsApi~extractNewsLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtractLinksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract News Links
     * Extract a news links from a news website. 
     * @param {String} url The url from which links should be extracted.
     * @param {String} apiKey Your API key.
     * @param {Object} opts Optional parameters
     * @param {String} [prefix] The prefix the news links must start with.
     * @param {Boolean} [subDomain] Whether to include links to news on sub-domains.
     * @param {module:api/NewsApi~extractNewsLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtractLinksResponse}
     */
    extractNewsLinks(url, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling extractNewsLinks");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling extractNewsLinks");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'prefix': opts['prefix'],
        'sub-domain': opts['subDomain'],
        'api-key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtractLinksResponse;
      return this.apiClient.callApi(
        '/extract-news-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geoCoordinates operation.
     * @callback module:api/NewsApi~geoCoordinatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoCoordinatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Geo Coordinates
     * Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
     * @param {String} location The address or name of the location, e.g. Tokyo, Japan.
     * @param {module:api/NewsApi~geoCoordinatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoCoordinatesResponse}
     */
    geoCoordinates(location, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling geoCoordinates");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeoCoordinatesResponse;
      return this.apiClient.callApi(
        '/geo-coordinates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsWebsiteToRSSFeed operation.
     * @callback module:api/NewsApi~newsWebsiteToRSSFeedCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News Website to RSS Feed
     * Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
     * @param {String} url The url from which links should be extracted.
     * @param {String} apiKey Your API key.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [extractNews] Whether extract news and add information such as description, publish date, and image to each item.
     * @param {module:api/NewsApi~newsWebsiteToRSSFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    newsWebsiteToRSSFeed(url, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling newsWebsiteToRSSFeed");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling newsWebsiteToRSSFeed");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'extract-news': opts['extractNews'],
        'api-key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/feed.rss', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchNews operation.
     * @callback module:api/NewsApi~searchNewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchNewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search News
     * Search for news.
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text to match in the news content.
     * @param {String} [sourceCountries] A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us.
     * @param {String} [language] The ISO 6391 language code of the news, e.g. \"en\" for English.
     * @param {Number} [minSentiment] The minimal sentiment of the news in range [-1,1].
     * @param {Number} [maxSentiment] The maximal sentiment of the news in range [-1,1].
     * @param {String} [earliestPublishDate] The news must have been published after this date.
     * @param {String} [latestPublishDate] The news must have been published before this date.
     * @param {String} [newsSources] A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk
     * @param {String} [authors] A comma-separated list of author names. Only news from any of the given authors will be returned.
     * @param {String} [entities] Filter news by entities, e.g. ORG:Tesla.
     * @param {String} [locationFilter] Filter news by radius around a certain location. Format is \"latitude,longitude,radius in kilometers\", e.g. 51.050407, 13.737262, 100
     * @param {Number} [offset] The number of news to skip in range [0,1000]
     * @param {Number} [number] The number of news to return in range [1,100]
     * @param {module:model/String} [sort] The sorting criteria.
     * @param {module:model/String} [sortDirection] Whether to sort ascending or descending.
     * @param {module:api/NewsApi~searchNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchNewsResponse}
     */
    searchNews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'text': opts['text'],
        'source-countries': opts['sourceCountries'],
        'language': opts['language'],
        'min-sentiment': opts['minSentiment'],
        'max-sentiment': opts['maxSentiment'],
        'earliest-publish-date': opts['earliestPublishDate'],
        'latest-publish-date': opts['latestPublishDate'],
        'news-sources': opts['newsSources'],
        'authors': opts['authors'],
        'entities': opts['entities'],
        'location-filter': opts['locationFilter'],
        'offset': opts['offset'],
        'number': opts['number'],
        'sort': opts['sort'],
        'sort-direction': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchNewsResponse;
      return this.apiClient.callApi(
        '/search-news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
