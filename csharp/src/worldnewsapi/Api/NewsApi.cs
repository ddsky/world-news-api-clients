/*
 * World News API
 *
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using worldnewsapi.Client;
using worldnewsapi.Model;

namespace worldnewsapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news entry from a news site.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNewsResponse</returns>
        ExtractNewsResponse ExtractNews(string url, bool analyze, int operationIndex = 0);

        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news entry from a news site.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNewsResponse</returns>
        ApiResponse<ExtractNewsResponse> ExtractNewsWithHttpInfo(string url, bool analyze, int operationIndex = 0);
        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract a news links from a news website. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractLinksResponse</returns>
        ExtractLinksResponse ExtractNewsLinks(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract a news links from a news website. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractLinksResponse</returns>
        ApiResponse<ExtractLinksResponse> ExtractNewsLinksWithHttpInfo(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GeoCoordinatesResponse</returns>
        GeoCoordinatesResponse GeoCoordinates(string location, int operationIndex = 0);

        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GeoCoordinatesResponse</returns>
        ApiResponse<GeoCoordinatesResponse> GeoCoordinatesWithHttpInfo(string location, int operationIndex = 0);
        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object NewsWebsiteToRSSFeed(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0);

        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> NewsWebsiteToRSSFeedWithHttpInfo(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search for news.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNewsResponse</returns>
        SearchNewsResponse SearchNews(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search for news.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNewsResponse</returns>
        ApiResponse<SearchNewsResponse> SearchNewsWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news entry from a news site.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNewsResponse</returns>
        System.Threading.Tasks.Task<ExtractNewsResponse> ExtractNewsAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news entry from a news site.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractNewsResponse>> ExtractNewsWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract a news links from a news website. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractLinksResponse</returns>
        System.Threading.Tasks.Task<ExtractLinksResponse> ExtractNewsLinksAsync(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract a news links from a news website. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractLinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractLinksResponse>> ExtractNewsLinksWithHttpInfoAsync(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeoCoordinatesResponse</returns>
        System.Threading.Tasks.Task<GeoCoordinatesResponse> GeoCoordinatesAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeoCoordinatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeoCoordinatesResponse>> GeoCoordinatesWithHttpInfoAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> NewsWebsiteToRSSFeedAsync(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NewsWebsiteToRSSFeedWithHttpInfoAsync(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search for news.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNewsResponse</returns>
        System.Threading.Tasks.Task<SearchNewsResponse> SearchNewsAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search for news.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchNewsResponse>> SearchNewsWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApi : INewsApiSync, INewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsApi : INewsApi
    {
        private worldnewsapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi(string basePath)
        {
            this.Configuration = worldnewsapi.Client.Configuration.MergeConfigurations(
                worldnewsapi.Client.GlobalConfiguration.Instance,
                new worldnewsapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = worldnewsapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsApi(worldnewsapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = worldnewsapi.Client.Configuration.MergeConfigurations(
                worldnewsapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = worldnewsapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NewsApi(worldnewsapi.Client.ISynchronousClient client, worldnewsapi.Client.IAsynchronousClient asyncClient, worldnewsapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = worldnewsapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public worldnewsapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public worldnewsapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public worldnewsapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public worldnewsapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Extract News Extract a news entry from a news site.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNewsResponse</returns>
        public ExtractNewsResponse ExtractNews(string url, bool analyze, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<ExtractNewsResponse> localVarResponse = ExtractNewsWithHttpInfo(url, analyze);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Extract a news entry from a news site.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNewsResponse</returns>
        public worldnewsapi.Client.ApiResponse<ExtractNewsResponse> ExtractNewsWithHttpInfo(string url, bool analyze, int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNews");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractNewsResponse>("/extract-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Extract a news entry from a news site.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNewsResponse</returns>
        public async System.Threading.Tasks.Task<ExtractNewsResponse> ExtractNewsAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<ExtractNewsResponse> localVarResponse = await ExtractNewsWithHttpInfoAsync(url, analyze, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Extract a news entry from a news site.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNewsResponse)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<ExtractNewsResponse>> ExtractNewsWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNews");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractNewsResponse>("/extract-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Links Extract a news links from a news website. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractLinksResponse</returns>
        public ExtractLinksResponse ExtractNewsLinks(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<ExtractLinksResponse> localVarResponse = ExtractNewsLinksWithHttpInfo(url, apiKey, prefix, subDomain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Links Extract a news links from a news website. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractLinksResponse</returns>
        public worldnewsapi.Client.ApiResponse<ExtractLinksResponse> ExtractNewsLinksWithHttpInfo(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNewsLinks");
            }

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'apiKey' when calling NewsApi->ExtractNewsLinks");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (subDomain != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sub-domain", subDomain));
            }
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", apiKey));

            localVarRequestOptions.Operation = "NewsApi.ExtractNewsLinks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractLinksResponse>("/extract-news-links", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNewsLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Links Extract a news links from a news website. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractLinksResponse</returns>
        public async System.Threading.Tasks.Task<ExtractLinksResponse> ExtractNewsLinksAsync(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<ExtractLinksResponse> localVarResponse = await ExtractNewsLinksWithHttpInfoAsync(url, apiKey, prefix, subDomain, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Links Extract a news links from a news website. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="prefix">The prefix the news links must start with. (optional)</param>
        /// <param name="subDomain">Whether to include links to news on sub-domains. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractLinksResponse)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<ExtractLinksResponse>> ExtractNewsLinksWithHttpInfoAsync(string url, string apiKey, string? prefix = default(string?), bool? subDomain = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNewsLinks");
            }

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'apiKey' when calling NewsApi->ExtractNewsLinks");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (subDomain != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sub-domain", subDomain));
            }
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", apiKey));

            localVarRequestOptions.Operation = "NewsApi.ExtractNewsLinks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractLinksResponse>("/extract-news-links", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNewsLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Geo Coordinates Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GeoCoordinatesResponse</returns>
        public GeoCoordinatesResponse GeoCoordinates(string location, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<GeoCoordinatesResponse> localVarResponse = GeoCoordinatesWithHttpInfo(location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Geo Coordinates Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GeoCoordinatesResponse</returns>
        public worldnewsapi.Client.ApiResponse<GeoCoordinatesResponse> GeoCoordinatesWithHttpInfo(string location, int operationIndex = 0)
        {
            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'location' when calling NewsApi->GeoCoordinates");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "NewsApi.GeoCoordinates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GeoCoordinatesResponse>("/geo-coordinates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeoCoordinates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Geo Coordinates Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GeoCoordinatesResponse</returns>
        public async System.Threading.Tasks.Task<GeoCoordinatesResponse> GeoCoordinatesAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<GeoCoordinatesResponse> localVarResponse = await GeoCoordinatesWithHttpInfoAsync(location, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Geo Coordinates Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location, e.g. Tokyo, Japan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GeoCoordinatesResponse)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<GeoCoordinatesResponse>> GeoCoordinatesWithHttpInfoAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'location' when calling NewsApi->GeoCoordinates");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "NewsApi.GeoCoordinates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GeoCoordinatesResponse>("/geo-coordinates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GeoCoordinates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object NewsWebsiteToRSSFeed(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<Object> localVarResponse = NewsWebsiteToRSSFeedWithHttpInfo(url, apiKey, extractNews);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public worldnewsapi.Client.ApiResponse<Object> NewsWebsiteToRSSFeedWithHttpInfo(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->NewsWebsiteToRSSFeed");
            }

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'apiKey' when calling NewsApi->NewsWebsiteToRSSFeed");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (extractNews != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "extract-news", extractNews));
            }
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", apiKey));

            localVarRequestOptions.Operation = "NewsApi.NewsWebsiteToRSSFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/feed.rss", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsWebsiteToRSSFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> NewsWebsiteToRSSFeedAsync(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<Object> localVarResponse = await NewsWebsiteToRSSFeedWithHttpInfoAsync(url, apiKey, extractNews, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url from which links should be extracted.</param>
        /// <param name="apiKey">Your API key.</param>
        /// <param name="extractNews">Whether extract news and add information such as description, publish date, and image to each item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<Object>> NewsWebsiteToRSSFeedWithHttpInfoAsync(string url, string apiKey, bool? extractNews = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->NewsWebsiteToRSSFeed");
            }

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'apiKey' when calling NewsApi->NewsWebsiteToRSSFeed");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (extractNews != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "extract-news", extractNews));
            }
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", apiKey));

            localVarRequestOptions.Operation = "NewsApi.NewsWebsiteToRSSFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/feed.rss", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsWebsiteToRSSFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News Search for news.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNewsResponse</returns>
        public SearchNewsResponse SearchNews(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<SearchNewsResponse> localVarResponse = SearchNewsWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News Search for news.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNewsResponse</returns>
        public worldnewsapi.Client.ApiResponse<SearchNewsResponse> SearchNewsWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0)
        {
            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchNewsResponse>("/search-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News Search for news.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNewsResponse</returns>
        public async System.Threading.Tasks.Task<SearchNewsResponse> SearchNewsAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<SearchNewsResponse> localVarResponse = await SearchNewsWithHttpInfoAsync(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News Search for news.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities, e.g. ORG:Tesla. (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="sort">The sorting criteria. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNewsResponse)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<SearchNewsResponse>> SearchNewsWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), int? offset = default(int?), int? number = default(int?), string? sort = default(string?), string? sortDirection = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchNewsResponse>("/search-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
