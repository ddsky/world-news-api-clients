/*
 * World News API
 *
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: mail@worldnewsapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using worldnewsapi.Client;
using worldnewsapi.Model;

namespace worldnewsapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNews200Response</returns>
        ExtractNews200Response ExtractNews(string url, bool analyze, int operationIndex = 0);

        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNews200Response</returns>
        ApiResponse<ExtractNews200Response> ExtractNewsWithHttpInfo(string url, bool analyze, int operationIndex = 0);
        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract news links from a news website.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNewsLinks200Response</returns>
        ExtractNewsLinks200Response ExtractNewsLinks(string url, bool analyze, int operationIndex = 0);

        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract news links from a news website.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNewsLinks200Response</returns>
        ApiResponse<ExtractNewsLinks200Response> ExtractNewsLinksWithHttpInfo(string url, bool analyze, int operationIndex = 0);
        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGeoCoordinates200Response</returns>
        GetGeoCoordinates200Response GetGeoCoordinates(string location, int operationIndex = 0);

        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGeoCoordinates200Response</returns>
        ApiResponse<GetGeoCoordinates200Response> GetGeoCoordinatesWithHttpInfo(string location, int operationIndex = 0);
        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object NewsWebsiteToRSSFeed(string url, bool analyze, int operationIndex = 0);

        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> NewsWebsiteToRSSFeedWithHttpInfo(string url, bool analyze, int operationIndex = 0);
        /// <summary>
        /// Newspaper Front Pages
        /// </summary>
        /// <remarks>
        /// Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewspaperFrontPages200Response</returns>
        NewspaperFrontPages200Response NewspaperFrontPages(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0);

        /// <summary>
        /// Newspaper Front Pages
        /// </summary>
        /// <remarks>
        /// Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewspaperFrontPages200Response</returns>
        ApiResponse<NewspaperFrontPages200Response> NewspaperFrontPagesWithHttpInfo(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve News Articles by Ids
        /// </summary>
        /// <remarks>
        /// Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveNewsArticlesByIds200Response</returns>
        RetrieveNewsArticlesByIds200Response RetrieveNewsArticlesByIds(string ids, int operationIndex = 0);

        /// <summary>
        /// Retrieve News Articles by Ids
        /// </summary>
        /// <remarks>
        /// Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveNewsArticlesByIds200Response</returns>
        ApiResponse<RetrieveNewsArticlesByIds200Response> RetrieveNewsArticlesByIdsWithHttpInfo(string ids, int operationIndex = 0);
        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNews200Response</returns>
        SearchNews200Response SearchNews(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNews200Response</returns>
        ApiResponse<SearchNews200Response> SearchNewsWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Top News
        /// </summary>
        /// <remarks>
        /// Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopNews200Response</returns>
        TopNews200Response TopNews(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Top News
        /// </summary>
        /// <remarks>
        /// Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopNews200Response</returns>
        ApiResponse<TopNews200Response> TopNewsWithHttpInfo(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNews200Response</returns>
        System.Threading.Tasks.Task<ExtractNews200Response> ExtractNewsAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNews200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractNews200Response>> ExtractNewsWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract news links from a news website.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNewsLinks200Response</returns>
        System.Threading.Tasks.Task<ExtractNewsLinks200Response> ExtractNewsLinksAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract News Links
        /// </summary>
        /// <remarks>
        /// Extract news links from a news website.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNewsLinks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractNewsLinks200Response>> ExtractNewsLinksWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGeoCoordinates200Response</returns>
        System.Threading.Tasks.Task<GetGeoCoordinates200Response> GetGeoCoordinatesAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Geo Coordinates
        /// </summary>
        /// <remarks>
        /// Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGeoCoordinates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGeoCoordinates200Response>> GetGeoCoordinatesWithHttpInfoAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> NewsWebsiteToRSSFeedAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// News Website to RSS Feed
        /// </summary>
        /// <remarks>
        /// Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NewsWebsiteToRSSFeedWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Newspaper Front Pages
        /// </summary>
        /// <remarks>
        /// Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewspaperFrontPages200Response</returns>
        System.Threading.Tasks.Task<NewspaperFrontPages200Response> NewspaperFrontPagesAsync(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Newspaper Front Pages
        /// </summary>
        /// <remarks>
        /// Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewspaperFrontPages200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewspaperFrontPages200Response>> NewspaperFrontPagesWithHttpInfoAsync(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve News Articles by Ids
        /// </summary>
        /// <remarks>
        /// Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveNewsArticlesByIds200Response</returns>
        System.Threading.Tasks.Task<RetrieveNewsArticlesByIds200Response> RetrieveNewsArticlesByIdsAsync(string ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve News Articles by Ids
        /// </summary>
        /// <remarks>
        /// Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveNewsArticlesByIds200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveNewsArticlesByIds200Response>> RetrieveNewsArticlesByIdsWithHttpInfoAsync(string ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNews200Response</returns>
        System.Threading.Tasks.Task<SearchNews200Response> SearchNewsAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNews200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchNews200Response>> SearchNewsWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Top News
        /// </summary>
        /// <remarks>
        /// Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopNews200Response</returns>
        System.Threading.Tasks.Task<TopNews200Response> TopNewsAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Top News
        /// </summary>
        /// <remarks>
        /// Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopNews200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopNews200Response>> TopNewsWithHttpInfoAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApi : INewsApiSync, INewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsApi : INewsApi
    {
        private worldnewsapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi(string basePath)
        {
            this.Configuration = worldnewsapi.Client.Configuration.MergeConfigurations(
                worldnewsapi.Client.GlobalConfiguration.Instance,
                new worldnewsapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = worldnewsapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsApi(worldnewsapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = worldnewsapi.Client.Configuration.MergeConfigurations(
                worldnewsapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new worldnewsapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = worldnewsapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NewsApi(worldnewsapi.Client.ISynchronousClient client, worldnewsapi.Client.IAsynchronousClient asyncClient, worldnewsapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = worldnewsapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public worldnewsapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public worldnewsapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public worldnewsapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public worldnewsapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNews200Response</returns>
        public ExtractNews200Response ExtractNews(string url, bool analyze, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<ExtractNews200Response> localVarResponse = ExtractNewsWithHttpInfo(url, analyze);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNews200Response</returns>
        public worldnewsapi.Client.ApiResponse<ExtractNews200Response> ExtractNewsWithHttpInfo(string url, bool analyze, int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNews");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractNews200Response>("/extract-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNews200Response</returns>
        public async System.Threading.Tasks.Task<ExtractNews200Response> ExtractNewsAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<ExtractNews200Response> localVarResponse = await ExtractNewsWithHttpInfoAsync(url, analyze, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, images, videos, publish date, authors, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNews200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<ExtractNews200Response>> ExtractNewsWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNews");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractNews200Response>("/extract-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Links Extract news links from a news website.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNewsLinks200Response</returns>
        public ExtractNewsLinks200Response ExtractNewsLinks(string url, bool analyze, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<ExtractNewsLinks200Response> localVarResponse = ExtractNewsLinksWithHttpInfo(url, analyze);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Links Extract news links from a news website.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNewsLinks200Response</returns>
        public worldnewsapi.Client.ApiResponse<ExtractNewsLinks200Response> ExtractNewsLinksWithHttpInfo(string url, bool analyze, int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNewsLinks");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNewsLinks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractNewsLinks200Response>("/extract-news-links", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNewsLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Links Extract news links from a news website.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNewsLinks200Response</returns>
        public async System.Threading.Tasks.Task<ExtractNewsLinks200Response> ExtractNewsLinksAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<ExtractNewsLinks200Response> localVarResponse = await ExtractNewsLinksWithHttpInfoAsync(url, analyze, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Links Extract news links from a news website.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNewsLinks200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<ExtractNewsLinks200Response>> ExtractNewsLinksWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNewsLinks");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNewsLinks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractNewsLinks200Response>("/extract-news-links", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNewsLinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Geo Coordinates Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGeoCoordinates200Response</returns>
        public GetGeoCoordinates200Response GetGeoCoordinates(string location, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<GetGeoCoordinates200Response> localVarResponse = GetGeoCoordinatesWithHttpInfo(location);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Geo Coordinates Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGeoCoordinates200Response</returns>
        public worldnewsapi.Client.ApiResponse<GetGeoCoordinates200Response> GetGeoCoordinatesWithHttpInfo(string location, int operationIndex = 0)
        {
            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'location' when calling NewsApi->GetGeoCoordinates");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "NewsApi.GetGeoCoordinates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGeoCoordinates200Response>("/geo-coordinates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeoCoordinates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Geo Coordinates Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGeoCoordinates200Response</returns>
        public async System.Threading.Tasks.Task<GetGeoCoordinates200Response> GetGeoCoordinatesAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<GetGeoCoordinates200Response> localVarResponse = await GetGeoCoordinatesWithHttpInfoAsync(location, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Geo Coordinates Retrieve the latitude and longitude of a location name. Given this information you can fill the location-filter parameter in the news search endpoint.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">The address or name of the location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGeoCoordinates200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<GetGeoCoordinates200Response>> GetGeoCoordinatesWithHttpInfoAsync(string location, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'location' when calling NewsApi->GetGeoCoordinates");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location", location));

            localVarRequestOptions.Operation = "NewsApi.GetGeoCoordinates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetGeoCoordinates200Response>("/geo-coordinates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGeoCoordinates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object NewsWebsiteToRSSFeed(string url, bool analyze, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<Object> localVarResponse = NewsWebsiteToRSSFeedWithHttpInfo(url, analyze);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public worldnewsapi.Client.ApiResponse<Object> NewsWebsiteToRSSFeedWithHttpInfo(string url, bool analyze, int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->NewsWebsiteToRSSFeed");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.NewsWebsiteToRSSFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/feed.rss", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsWebsiteToRSSFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> NewsWebsiteToRSSFeedAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<Object> localVarResponse = await NewsWebsiteToRSSFeedWithHttpInfoAsync(url, analyze, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News Website to RSS Feed Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<Object>> NewsWebsiteToRSSFeedWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->NewsWebsiteToRSSFeed");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.NewsWebsiteToRSSFeed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/feed.rss", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsWebsiteToRSSFeed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Newspaper Front Pages Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewspaperFrontPages200Response</returns>
        public NewspaperFrontPages200Response NewspaperFrontPages(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<NewspaperFrontPages200Response> localVarResponse = NewspaperFrontPagesWithHttpInfo(sourceCountry, sourceName, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Newspaper Front Pages Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewspaperFrontPages200Response</returns>
        public worldnewsapi.Client.ApiResponse<NewspaperFrontPages200Response> NewspaperFrontPagesWithHttpInfo(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0)
        {
            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-country", sourceCountry));
            }
            if (sourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-name", sourceName));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "NewsApi.NewspaperFrontPages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NewspaperFrontPages200Response>("/front-pages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewspaperFrontPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Newspaper Front Pages Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewspaperFrontPages200Response</returns>
        public async System.Threading.Tasks.Task<NewspaperFrontPages200Response> NewspaperFrontPagesAsync(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<NewspaperFrontPages200Response> localVarResponse = await NewspaperFrontPagesWithHttpInfoAsync(sourceCountry, sourceName, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Newspaper Front Pages Get the front pages of newspapers from around the world. The API provides images of the front pages of newspapers from different countries. Here&#39;s an example of some of today&#39;s newspapers:
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the newspaper publication. (optional)</param>
        /// <param name="sourceName">The identifier of the publication see attached list. (optional)</param>
        /// <param name="date">The date for which the front page should be retrieved. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewspaperFrontPages200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<NewspaperFrontPages200Response>> NewspaperFrontPagesWithHttpInfoAsync(string? sourceCountry = default(string?), string? sourceName = default(string?), string? date = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-country", sourceCountry));
            }
            if (sourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-name", sourceName));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            localVarRequestOptions.Operation = "NewsApi.NewspaperFrontPages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NewspaperFrontPages200Response>("/front-pages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewspaperFrontPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve News Articles by Ids Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveNewsArticlesByIds200Response</returns>
        public RetrieveNewsArticlesByIds200Response RetrieveNewsArticlesByIds(string ids, int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<RetrieveNewsArticlesByIds200Response> localVarResponse = RetrieveNewsArticlesByIdsWithHttpInfo(ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve News Articles by Ids Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveNewsArticlesByIds200Response</returns>
        public worldnewsapi.Client.ApiResponse<RetrieveNewsArticlesByIds200Response> RetrieveNewsArticlesByIdsWithHttpInfo(string ids, int operationIndex = 0)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'ids' when calling NewsApi->RetrieveNewsArticlesByIds");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));

            localVarRequestOptions.Operation = "NewsApi.RetrieveNewsArticlesByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RetrieveNewsArticlesByIds200Response>("/retrieve-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveNewsArticlesByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve News Articles by Ids Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveNewsArticlesByIds200Response</returns>
        public async System.Threading.Tasks.Task<RetrieveNewsArticlesByIds200Response> RetrieveNewsArticlesByIdsAsync(string ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<RetrieveNewsArticlesByIds200Response> localVarResponse = await RetrieveNewsArticlesByIdsWithHttpInfoAsync(ids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve News Articles by Ids Retrieve information about one or more news articles by their ids. The ids can be retrieved from the search news or top news APIs.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of news ids.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveNewsArticlesByIds200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<RetrieveNewsArticlesByIds200Response>> RetrieveNewsArticlesByIdsWithHttpInfoAsync(string ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'ids' when calling NewsApi->RetrieveNewsArticlesByIds");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));

            localVarRequestOptions.Operation = "NewsApi.RetrieveNewsArticlesByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RetrieveNewsArticlesByIds200Response>("/retrieve-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveNewsArticlesByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNews200Response</returns>
        public SearchNews200Response SearchNews(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<SearchNews200Response> localVarResponse = SearchNewsWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNews200Response</returns>
        public worldnewsapi.Client.ApiResponse<SearchNews200Response> SearchNewsWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchNews200Response>("/search-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNews200Response</returns>
        public async System.Threading.Tasks.Task<SearchNews200Response> SearchNewsAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<SearchNews200Response> localVarResponse = await SearchNewsWithHttpInfoAsync(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNews200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<SearchNews200Response>> SearchNewsWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchNews200Response>("/search-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Top News Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopNews200Response</returns>
        public TopNews200Response TopNews(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0)
        {
            worldnewsapi.Client.ApiResponse<TopNews200Response> localVarResponse = TopNewsWithHttpInfo(sourceCountry, language, date, headlinesOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Top News Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopNews200Response</returns>
        public worldnewsapi.Client.ApiResponse<TopNews200Response> TopNewsWithHttpInfo(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceCountry' is set
            if (sourceCountry == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'sourceCountry' when calling NewsApi->TopNews");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'language' when calling NewsApi->TopNews");
            }

            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-country", sourceCountry));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (headlinesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "headlines-only", headlinesOnly));
            }

            localVarRequestOptions.Operation = "NewsApi.TopNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TopNews200Response>("/top-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Top News Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopNews200Response</returns>
        public async System.Threading.Tasks.Task<TopNews200Response> TopNewsAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            worldnewsapi.Client.ApiResponse<TopNews200Response> localVarResponse = await TopNewsWithHttpInfoAsync(sourceCountry, language, date, headlinesOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Top News Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="worldnewsapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopNews200Response)</returns>
        public async System.Threading.Tasks.Task<worldnewsapi.Client.ApiResponse<TopNews200Response>> TopNewsWithHttpInfoAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceCountry' is set
            if (sourceCountry == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'sourceCountry' when calling NewsApi->TopNews");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new worldnewsapi.Client.ApiException(400, "Missing required parameter 'language' when calling NewsApi->TopNews");
            }


            worldnewsapi.Client.RequestOptions localVarRequestOptions = new worldnewsapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = worldnewsapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = worldnewsapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "source-country", sourceCountry));
            localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (headlinesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "headlines-only", headlinesOnly));
            }

            localVarRequestOptions.Operation = "NewsApi.TopNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(worldnewsapi.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TopNews200Response>("/top-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
