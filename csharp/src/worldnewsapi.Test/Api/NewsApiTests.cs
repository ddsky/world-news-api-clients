/*
 * World News API
 *
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using worldnewsapi.Client;
using worldnewsapi.Api;
// uncomment below to import models
//using worldnewsapi.Model;

namespace worldnewsapi.Test.Api
{
    /// <summary>
    ///  Class for testing NewsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NewsApiTests : IDisposable
    {
        private NewsApi instance;

        public NewsApiTests()
        {
            instance = new NewsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of NewsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' NewsApi
            //Assert.IsType<NewsApi>(instance);
        }

        /// <summary>
        /// Test ExtractNews
        /// </summary>
        [Fact]
        public void ExtractNewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //bool analyze = null;
            //var response = instance.ExtractNews(url, analyze);
            //Assert.IsType<ExtractNewsResponse>(response);
        }

        /// <summary>
        /// Test ExtractNewsLinks
        /// </summary>
        [Fact]
        public void ExtractNewsLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //string apiKey = null;
            //string? prefix = null;
            //bool? subDomain = null;
            //var response = instance.ExtractNewsLinks(url, apiKey, prefix, subDomain);
            //Assert.IsType<ExtractLinksResponse>(response);
        }

        /// <summary>
        /// Test GeoCoordinates
        /// </summary>
        [Fact]
        public void GeoCoordinatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string location = null;
            //var response = instance.GeoCoordinates(location);
            //Assert.IsType<GeoCoordinatesResponse>(response);
        }

        /// <summary>
        /// Test NewsWebsiteToRSSFeed
        /// </summary>
        [Fact]
        public void NewsWebsiteToRSSFeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //string apiKey = null;
            //bool? extractNews = null;
            //var response = instance.NewsWebsiteToRSSFeed(url, apiKey, extractNews);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SearchNews
        /// </summary>
        [Fact]
        public void SearchNewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? text = null;
            //string? sourceCountries = null;
            //string? language = null;
            //double? minSentiment = null;
            //double? maxSentiment = null;
            //string? earliestPublishDate = null;
            //string? latestPublishDate = null;
            //string? newsSources = null;
            //string? authors = null;
            //string? entities = null;
            //string? locationFilter = null;
            //int? offset = null;
            //int? number = null;
            //string? sort = null;
            //string? sortDirection = null;
            //var response = instance.SearchNews(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, offset, number, sort, sortDirection);
            //Assert.IsType<SearchNewsResponse>(response);
        }
    }
}
