/*
World News API

The world's news wrapped into a single API.

API version: 1.0
Contact: mail@worldnewsapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2002 struct for InlineResponse2002
type InlineResponse2002 struct {
	NewsLinks []string `json:"news_links,omitempty"`
}

// NewInlineResponse2002 instantiates a new InlineResponse2002 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2002() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// NewInlineResponse2002WithDefaults instantiates a new InlineResponse2002 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2002WithDefaults() *InlineResponse2002 {
	this := InlineResponse2002{}
	return &this
}

// GetNewsLinks returns the NewsLinks field value if set, zero value otherwise.
func (o *InlineResponse2002) GetNewsLinks() []string {
	if o == nil || o.NewsLinks == nil {
		var ret []string
		return ret
	}
	return o.NewsLinks
}

// GetNewsLinksOk returns a tuple with the NewsLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002) GetNewsLinksOk() ([]string, bool) {
	if o == nil || o.NewsLinks == nil {
		return nil, false
	}
	return o.NewsLinks, true
}

// HasNewsLinks returns a boolean if a field has been set.
func (o *InlineResponse2002) HasNewsLinks() bool {
	if o != nil && o.NewsLinks != nil {
		return true
	}

	return false
}

// SetNewsLinks gets a reference to the given []string and assigns it to the NewsLinks field.
func (o *InlineResponse2002) SetNewsLinks(v []string) {
	o.NewsLinks = v
}

func (o InlineResponse2002) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NewsLinks != nil {
		toSerialize["news_links"] = o.NewsLinks
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2002 struct {
	value *InlineResponse2002
	isSet bool
}

func (v NullableInlineResponse2002) Get() *InlineResponse2002 {
	return v.value
}

func (v *NullableInlineResponse2002) Set(val *InlineResponse2002) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2002) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2002) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2002(val *InlineResponse2002) *NullableInlineResponse2002 {
	return &NullableInlineResponse2002{value: val, isSet: true}
}

func (v NullableInlineResponse2002) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2002) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


