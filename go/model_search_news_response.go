/*
World News API

The world's news wrapped into a single API.

API version: 1.1
Contact: mail@worldnewsapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldnewsapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchNewsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchNewsResponse{}

// SearchNewsResponse struct for SearchNewsResponse
type SearchNewsResponse struct {
	Offset int32 `json:"offset"`
	Number int32 `json:"number"`
	Available int32 `json:"available"`
	News []NewsArticle `json:"news"`
}

type _SearchNewsResponse SearchNewsResponse

// NewSearchNewsResponse instantiates a new SearchNewsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchNewsResponse(offset int32, number int32, available int32, news []NewsArticle) *SearchNewsResponse {
	this := SearchNewsResponse{}
	this.Offset = offset
	this.Number = number
	this.Available = available
	this.News = news
	return &this
}

// NewSearchNewsResponseWithDefaults instantiates a new SearchNewsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchNewsResponseWithDefaults() *SearchNewsResponse {
	this := SearchNewsResponse{}
	return &this
}

// GetOffset returns the Offset field value
func (o *SearchNewsResponse) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *SearchNewsResponse) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *SearchNewsResponse) SetOffset(v int32) {
	o.Offset = v
}

// GetNumber returns the Number field value
func (o *SearchNewsResponse) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *SearchNewsResponse) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *SearchNewsResponse) SetNumber(v int32) {
	o.Number = v
}

// GetAvailable returns the Available field value
func (o *SearchNewsResponse) GetAvailable() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *SearchNewsResponse) GetAvailableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *SearchNewsResponse) SetAvailable(v int32) {
	o.Available = v
}

// GetNews returns the News field value
func (o *SearchNewsResponse) GetNews() []NewsArticle {
	if o == nil {
		var ret []NewsArticle
		return ret
	}

	return o.News
}

// GetNewsOk returns a tuple with the News field value
// and a boolean to check if the value has been set.
func (o *SearchNewsResponse) GetNewsOk() ([]NewsArticle, bool) {
	if o == nil {
		return nil, false
	}
	return o.News, true
}

// SetNews sets field value
func (o *SearchNewsResponse) SetNews(v []NewsArticle) {
	o.News = v
}

func (o SearchNewsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchNewsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["offset"] = o.Offset
	toSerialize["number"] = o.Number
	toSerialize["available"] = o.Available
	toSerialize["news"] = o.News
	return toSerialize, nil
}

func (o *SearchNewsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"offset",
		"number",
		"available",
		"news",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchNewsResponse := _SearchNewsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchNewsResponse)

	if err != nil {
		return err
	}

	*o = SearchNewsResponse(varSearchNewsResponse)

	return err
}

type NullableSearchNewsResponse struct {
	value *SearchNewsResponse
	isSet bool
}

func (v NullableSearchNewsResponse) Get() *SearchNewsResponse {
	return v.value
}

func (v *NullableSearchNewsResponse) Set(val *SearchNewsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchNewsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchNewsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchNewsResponse(val *SearchNewsResponse) *NullableSearchNewsResponse {
	return &NullableSearchNewsResponse{value: val, isSet: true}
}

func (v NullableSearchNewsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchNewsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


