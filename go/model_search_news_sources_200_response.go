/*
World News API

The world's news wrapped into a single API.

API version: 2.2.0
Contact: mail@worldnewsapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldnewsapi

import (
	"encoding/json"
)

// checks if the SearchNewsSources200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchNewsSources200Response{}

// SearchNewsSources200Response struct for SearchNewsSources200Response
type SearchNewsSources200Response struct {
	Available *int32 `json:"available,omitempty"`
	Sources []SearchNewsSources200ResponseSourcesInner `json:"sources,omitempty"`
}

// NewSearchNewsSources200Response instantiates a new SearchNewsSources200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchNewsSources200Response() *SearchNewsSources200Response {
	this := SearchNewsSources200Response{}
	return &this
}

// NewSearchNewsSources200ResponseWithDefaults instantiates a new SearchNewsSources200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchNewsSources200ResponseWithDefaults() *SearchNewsSources200Response {
	this := SearchNewsSources200Response{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *SearchNewsSources200Response) GetAvailable() int32 {
	if o == nil || IsNil(o.Available) {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchNewsSources200Response) GetAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *SearchNewsSources200Response) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *SearchNewsSources200Response) SetAvailable(v int32) {
	o.Available = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *SearchNewsSources200Response) GetSources() []SearchNewsSources200ResponseSourcesInner {
	if o == nil || IsNil(o.Sources) {
		var ret []SearchNewsSources200ResponseSourcesInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchNewsSources200Response) GetSourcesOk() ([]SearchNewsSources200ResponseSourcesInner, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *SearchNewsSources200Response) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SearchNewsSources200ResponseSourcesInner and assigns it to the Sources field.
func (o *SearchNewsSources200Response) SetSources(v []SearchNewsSources200ResponseSourcesInner) {
	o.Sources = v
}

func (o SearchNewsSources200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchNewsSources200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableSearchNewsSources200Response struct {
	value *SearchNewsSources200Response
	isSet bool
}

func (v NullableSearchNewsSources200Response) Get() *SearchNewsSources200Response {
	return v.value
}

func (v *NullableSearchNewsSources200Response) Set(val *SearchNewsSources200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchNewsSources200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchNewsSources200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchNewsSources200Response(val *SearchNewsSources200Response) *NullableSearchNewsSources200Response {
	return &NullableSearchNewsSources200Response{value: val, isSet: true}
}

func (v NullableSearchNewsSources200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchNewsSources200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


