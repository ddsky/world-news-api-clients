/*
World News API

The world's news wrapped into a single API.

API version: 1.1
Contact: mail@worldnewsapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package worldnewsapi

import (
	"encoding/json"
)

// checks if the News type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &News{}

// News A news entry.
type News struct {
	Id *int32 `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Text *string `json:"text,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Url *string `json:"url,omitempty"`
	Image NullableString `json:"image,omitempty"`
	PublishDate *string `json:"publish_date,omitempty"`
	Author *string `json:"author,omitempty"`
	Language *string `json:"language,omitempty"`
	SourceCountry *string `json:"source_country,omitempty"`
	Sentiment *float32 `json:"sentiment,omitempty"`
}

// NewNews instantiates a new News object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNews() *News {
	this := News{}
	return &this
}

// NewNewsWithDefaults instantiates a new News object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsWithDefaults() *News {
	this := News{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *News) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *News) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *News) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *News) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *News) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *News) SetTitle(v string) {
	o.Title = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *News) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *News) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *News) SetText(v string) {
	o.Text = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *News) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *News) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *News) SetSummary(v string) {
	o.Summary = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *News) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *News) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *News) SetUrl(v string) {
	o.Url = &v
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *News) GetImage() string {
	if o == nil || IsNil(o.Image.Get()) {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *News) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *News) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *News) SetImage(v string) {
	o.Image.Set(&v)
}
// SetImageNil sets the value for Image to be an explicit nil
func (o *News) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *News) UnsetImage() {
	o.Image.Unset()
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *News) GetPublishDate() string {
	if o == nil || IsNil(o.PublishDate) {
		var ret string
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetPublishDateOk() (*string, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *News) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given string and assigns it to the PublishDate field.
func (o *News) SetPublishDate(v string) {
	o.PublishDate = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *News) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *News) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *News) SetAuthor(v string) {
	o.Author = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *News) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *News) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *News) SetLanguage(v string) {
	o.Language = &v
}

// GetSourceCountry returns the SourceCountry field value if set, zero value otherwise.
func (o *News) GetSourceCountry() string {
	if o == nil || IsNil(o.SourceCountry) {
		var ret string
		return ret
	}
	return *o.SourceCountry
}

// GetSourceCountryOk returns a tuple with the SourceCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetSourceCountryOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCountry) {
		return nil, false
	}
	return o.SourceCountry, true
}

// HasSourceCountry returns a boolean if a field has been set.
func (o *News) HasSourceCountry() bool {
	if o != nil && !IsNil(o.SourceCountry) {
		return true
	}

	return false
}

// SetSourceCountry gets a reference to the given string and assigns it to the SourceCountry field.
func (o *News) SetSourceCountry(v string) {
	o.SourceCountry = &v
}

// GetSentiment returns the Sentiment field value if set, zero value otherwise.
func (o *News) GetSentiment() float32 {
	if o == nil || IsNil(o.Sentiment) {
		var ret float32
		return ret
	}
	return *o.Sentiment
}

// GetSentimentOk returns a tuple with the Sentiment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *News) GetSentimentOk() (*float32, bool) {
	if o == nil || IsNil(o.Sentiment) {
		return nil, false
	}
	return o.Sentiment, true
}

// HasSentiment returns a boolean if a field has been set.
func (o *News) HasSentiment() bool {
	if o != nil && !IsNil(o.Sentiment) {
		return true
	}

	return false
}

// SetSentiment gets a reference to the given float32 and assigns it to the Sentiment field.
func (o *News) SetSentiment(v float32) {
	o.Sentiment = &v
}

func (o News) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o News) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publish_date"] = o.PublishDate
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.SourceCountry) {
		toSerialize["source_country"] = o.SourceCountry
	}
	if !IsNil(o.Sentiment) {
		toSerialize["sentiment"] = o.Sentiment
	}
	return toSerialize, nil
}

type NullableNews struct {
	value *News
	isSet bool
}

func (v NullableNews) Get() *News {
	return v.value
}

func (v *NullableNews) Set(val *News) {
	v.value = val
	v.isSet = true
}

func (v NullableNews) IsSet() bool {
	return v.isSet
}

func (v *NullableNews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNews(val *News) *NullableNews {
	return &NullableNews{value: val, isSet: true}
}

func (v NullableNews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


