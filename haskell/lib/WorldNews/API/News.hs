{-
   World News API

   The world's news wrapped into a single API.

   OpenAPI Version: 3.0.0
   World News API API version: 1.0
   Contact: mail@worldnewsapi.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : WorldNews.API.News
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module WorldNews.API.News where

import WorldNews.Core
import WorldNews.MimeTypes
import WorldNews.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** News

-- *** extractNews

-- | @GET \/extract-news@
-- 
-- Extract News
-- 
-- Extract a news entry from a news site.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractNews
  :: Url -- ^ "url" -  The url of the news.
  -> Analyze -- ^ "analyze" -  Whether to analyze the news (extract entities etc.)
  -> WorldNewsRequest ExtractNews MimeNoContent InlineResponse2001 MimeJSON
extractNews (Url url) (Analyze analyze) =
  _mkRequest "GET" ["/extract-news"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)
    `addQuery` toQuery ("analyze", Just analyze)

data ExtractNews  
-- | @application/json@
instance Produces ExtractNews MimeJSON


-- *** extractNewsLinks

-- | @GET \/extract-news-links@
-- 
-- Extract News Links
-- 
-- Extract a news links from a news website. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractNewsLinks
  :: Url -- ^ "url" -  The url from which links should be extracted.
  -> ApiKey -- ^ "apiKey" -  Your API key.
  -> WorldNewsRequest ExtractNewsLinks MimeNoContent InlineResponse2002 MimeJSON
extractNewsLinks (Url url) (ApiKey apiKey) =
  _mkRequest "GET" ["/extract-news-links"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)
    `addQuery` toQuery ("api-key", Just apiKey)

data ExtractNewsLinks  

-- | /Optional Param/ "prefix" - The prefix the news links must start with.
instance HasOptionalParam ExtractNewsLinks Prefix where
  applyOptionalParam req (Prefix xs) =
    req `addQuery` toQuery ("prefix", Just xs)

-- | /Optional Param/ "sub-domain" - Whether to include links to news on sub-domains.
instance HasOptionalParam ExtractNewsLinks SubDomain where
  applyOptionalParam req (SubDomain xs) =
    req `addQuery` toQuery ("sub-domain", Just xs)
-- | @application/json@
instance Produces ExtractNewsLinks MimeJSON


-- *** geoCoordinates

-- | @GET \/geo-coordinates@
-- 
-- Get Geo Coordinates
-- 
-- Get the geo coordinates for a location. The location can be an exact address but also just the name of a city or country.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
geoCoordinates
  :: Location -- ^ "location" -  The address or name of the location, e.g. Tokyo, Japan.
  -> WorldNewsRequest GeoCoordinates MimeNoContent InlineResponse2003 MimeJSON
geoCoordinates (Location location) =
  _mkRequest "GET" ["/geo-coordinates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("location", Just location)

data GeoCoordinates  
-- | @application/json@
instance Produces GeoCoordinates MimeJSON


-- *** newsWebsiteToRSSFeed

-- | @GET \/feed.rss@
-- 
-- News Website to RSS Feed
-- 
-- Turn a news website into an RSS feed. Any page of a news website can be turned into an RSS feed. Provide the URL to the page and the API will return an RSS feed with the latest news from that page. 
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
newsWebsiteToRSSFeed
  :: Url -- ^ "url" -  The url from which links should be extracted.
  -> ApiKey -- ^ "apiKey" -  Your API key.
  -> WorldNewsRequest NewsWebsiteToRSSFeed MimeNoContent A.Value MimeXML
newsWebsiteToRSSFeed (Url url) (ApiKey apiKey) =
  _mkRequest "GET" ["/feed.rss"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)
    `addQuery` toQuery ("api-key", Just apiKey)

data NewsWebsiteToRSSFeed  

-- | /Optional Param/ "extract-news" - Whether extract news and add information such as description, publish date, and image to each item.
instance HasOptionalParam NewsWebsiteToRSSFeed ExtractNews2 where
  applyOptionalParam req (ExtractNews2 xs) =
    req `addQuery` toQuery ("extract-news", Just xs)
-- | @application/xml@
instance Produces NewsWebsiteToRSSFeed MimeXML


-- *** searchNews

-- | @GET \/search-news@
-- 
-- Search News
-- 
-- Search for news.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchNews
  :: WorldNewsRequest SearchNews MimeNoContent InlineResponse200 MimeJSON
searchNews =
  _mkRequest "GET" ["/search-news"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)

data SearchNews  

-- | /Optional Param/ "text" - The text to match in the news content.
instance HasOptionalParam SearchNews ParamText where
  applyOptionalParam req (ParamText xs) =
    req `addQuery` toQuery ("text", Just xs)

-- | /Optional Param/ "source-countries" - A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us.
instance HasOptionalParam SearchNews SourceCountries where
  applyOptionalParam req (SourceCountries xs) =
    req `addQuery` toQuery ("source-countries", Just xs)

-- | /Optional Param/ "language" - The ISO 6391 language code of the news, e.g. \"en\" for English.
instance HasOptionalParam SearchNews Language where
  applyOptionalParam req (Language xs) =
    req `addQuery` toQuery ("language", Just xs)

-- | /Optional Param/ "min-sentiment" - The minimal sentiment of the news in range [-1,1].
instance HasOptionalParam SearchNews MinSentiment where
  applyOptionalParam req (MinSentiment xs) =
    req `addQuery` toQuery ("min-sentiment", Just xs)

-- | /Optional Param/ "max-sentiment" - The maximal sentiment of the news in range [-1,1].
instance HasOptionalParam SearchNews MaxSentiment where
  applyOptionalParam req (MaxSentiment xs) =
    req `addQuery` toQuery ("max-sentiment", Just xs)

-- | /Optional Param/ "earliest-publish-date" - The news must have been published after this date.
instance HasOptionalParam SearchNews EarliestPublishDate where
  applyOptionalParam req (EarliestPublishDate xs) =
    req `addQuery` toQuery ("earliest-publish-date", Just xs)

-- | /Optional Param/ "latest-publish-date" - The news must have been published before this date.
instance HasOptionalParam SearchNews LatestPublishDate where
  applyOptionalParam req (LatestPublishDate xs) =
    req `addQuery` toQuery ("latest-publish-date", Just xs)

-- | /Optional Param/ "news-sources" - A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk
instance HasOptionalParam SearchNews NewsSources where
  applyOptionalParam req (NewsSources xs) =
    req `addQuery` toQuery ("news-sources", Just xs)

-- | /Optional Param/ "authors" - A comma-separated list of author names. Only news from any of the given authors will be returned.
instance HasOptionalParam SearchNews Authors where
  applyOptionalParam req (Authors xs) =
    req `addQuery` toQuery ("authors", Just xs)

-- | /Optional Param/ "entities" - Filter news by entities, e.g. ORG:Tesla.
instance HasOptionalParam SearchNews Entities where
  applyOptionalParam req (Entities xs) =
    req `addQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "location-filter" - Filter news by radius around a certain location. Format is \"latitude,longitude,radius in kilometers\", e.g. 51.050407, 13.737262, 100
instance HasOptionalParam SearchNews LocationFilter where
  applyOptionalParam req (LocationFilter xs) =
    req `addQuery` toQuery ("location-filter", Just xs)

-- | /Optional Param/ "offset" - The number of news to skip in range [0,1000]
instance HasOptionalParam SearchNews Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of news to return in range [1,100]
instance HasOptionalParam SearchNews Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "sort" - The sorting criteria.
instance HasOptionalParam SearchNews Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "sort-direction" - Whether to sort ascending or descending.
instance HasOptionalParam SearchNews SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `addQuery` toQuery ("sort-direction", Just xs)
-- | @application/json@
instance Produces SearchNews MimeJSON

