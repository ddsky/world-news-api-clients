=begin comment

World News API

The world's news wrapped into a single API.

The version of the OpenAPI document: 2.2.0
Contact: mail@worldnewsapi.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::NewsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# extract_news
#
# Extract News
#
# @param string $url The url of the news. (required)
# @param boolean $analyze Whether to analyze the extracted news (extract entities, detect sentiment etc.) (optional)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The url of the news.',
        required => '1',
    },
    'analyze' => {
        data_type => 'boolean',
        description => 'Whether to analyze the extracted news (extract entities, detect sentiment etc.)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_news' } = {
        summary => 'Extract News',
        params => $params,
        returns => 'ExtractNews200Response',
        };
}
# @return ExtractNews200Response
#
sub extract_news {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_news");
    }

    # parse inputs
    my $_resource_path = '/extract-news';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'analyze'}) {
        $query_params->{'analyze'} = $self->{api_client}->to_query_value($args{'analyze'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractNews200Response', $response);
    return $_response_object;
}

#
# extract_news_links
#
# Extract News Links
#
# @param string $url The url of the news. (required)
# @param boolean $analyze Whether to analyze the extracted news (extract entities, detect sentiment etc.) (optional)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The url of the news.',
        required => '1',
    },
    'analyze' => {
        data_type => 'boolean',
        description => 'Whether to analyze the extracted news (extract entities, detect sentiment etc.)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_news_links' } = {
        summary => 'Extract News Links',
        params => $params,
        returns => 'ExtractNewsLinks200Response',
        };
}
# @return ExtractNewsLinks200Response
#
sub extract_news_links {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_news_links");
    }

    # parse inputs
    my $_resource_path = '/extract-news-links';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'analyze'}) {
        $query_params->{'analyze'} = $self->{api_client}->to_query_value($args{'analyze'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractNewsLinks200Response', $response);
    return $_response_object;
}

#
# get_geo_coordinates
#
# Get Geo Coordinates
#
# @param string $location The address or name of the location. (required)
{
    my $params = {
    'location' => {
        data_type => 'string',
        description => 'The address or name of the location.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_geo_coordinates' } = {
        summary => 'Get Geo Coordinates',
        params => $params,
        returns => 'GetGeoCoordinates200Response',
        };
}
# @return GetGeoCoordinates200Response
#
sub get_geo_coordinates {
    my ($self, %args) = @_;

    # verify the required parameter 'location' is set
    unless (exists $args{'location'}) {
      croak("Missing the required parameter 'location' when calling get_geo_coordinates");
    }

    # parse inputs
    my $_resource_path = '/geo-coordinates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetGeoCoordinates200Response', $response);
    return $_response_object;
}

#
# news_website_to_rss_feed
#
# News Website to RSS Feed
#
# @param string $url The url of the site for which an RSS feed should be created. (required)
# @param boolean $extract_news Whether to extract the news for each link instead of just returning the link. (optional)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The url of the site for which an RSS feed should be created.',
        required => '1',
    },
    'extract_news' => {
        data_type => 'boolean',
        description => 'Whether to extract the news for each link instead of just returning the link.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'news_website_to_rss_feed' } = {
        summary => 'News Website to RSS Feed',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub news_website_to_rss_feed {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling news_website_to_rss_feed");
    }

    # parse inputs
    my $_resource_path = '/feed.rss';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'extract_news'}) {
        $query_params->{'extract-news'} = $self->{api_client}->to_query_value($args{'extract_news'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# retrieve_news_articles_by_ids
#
# Retrieve News Articles by Ids
#
# @param string $ids A comma separated list of news ids. (required)
{
    my $params = {
    'ids' => {
        data_type => 'string',
        description => 'A comma separated list of news ids.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'retrieve_news_articles_by_ids' } = {
        summary => 'Retrieve News Articles by Ids',
        params => $params,
        returns => 'RetrieveNewsArticlesByIds200Response',
        };
}
# @return RetrieveNewsArticlesByIds200Response
#
sub retrieve_news_articles_by_ids {
    my ($self, %args) = @_;

    # verify the required parameter 'ids' is set
    unless (exists $args{'ids'}) {
      croak("Missing the required parameter 'ids' when calling retrieve_news_articles_by_ids");
    }

    # parse inputs
    my $_resource_path = '/retrieve-news';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RetrieveNewsArticlesByIds200Response', $response);
    return $_response_object;
}

#
# retrieve_newspaper_front_page
#
# Retrieve Newspaper Front Page
#
# @param string $source_country The ISO 3166 country code of the newspaper publication. (optional)
# @param string $source_name The identifier of the publication see attached list. (optional)
# @param string $date The date for which the front page should be retrieved. You can also go into the past, the earliest date is 2024-07-09. (optional)
{
    my $params = {
    'source_country' => {
        data_type => 'string',
        description => 'The ISO 3166 country code of the newspaper publication.',
        required => '0',
    },
    'source_name' => {
        data_type => 'string',
        description => 'The identifier of the publication see attached list.',
        required => '0',
    },
    'date' => {
        data_type => 'string',
        description => 'The date for which the front page should be retrieved. You can also go into the past, the earliest date is 2024-07-09.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'retrieve_newspaper_front_page' } = {
        summary => 'Retrieve Newspaper Front Page',
        params => $params,
        returns => 'RetrieveNewspaperFrontPage200Response',
        };
}
# @return RetrieveNewspaperFrontPage200Response
#
sub retrieve_newspaper_front_page {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/retrieve-front-page';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source_country'}) {
        $query_params->{'source-country'} = $self->{api_client}->to_query_value($args{'source_country'});
    }

    # query params
    if ( exists $args{'source_name'}) {
        $query_params->{'source-name'} = $self->{api_client}->to_query_value($args{'source_name'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RetrieveNewspaperFrontPage200Response', $response);
    return $_response_object;
}

#
# search_news
#
# Search News
#
# @param string $text The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. For exact matches just put your term in quotes, e.g. \&quot;elon musk\&quot;. (optional)
# @param string $text_match_indexes If a \&quot;text\&quot; is given to search for, you can specify where this text is searched for. Possible values are title, content, or both separated by a comma. By default, both title and content are searched. (optional)
# @param string $source_country The ISO 3166 country code from which the news should originate. (optional)
# @param string $language The ISO 6391 language code of the news. (optional)
# @param double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
# @param double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
# @param string $earliest_publish_date The news must have been published after this date. (optional)
# @param string $latest_publish_date The news must have been published before this date. (optional)
# @param string $news_sources A comma-separated list of news sources from which the news should originate. (optional)
# @param string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
# @param string $categories A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. Please note that the filter might leave out news, especially in non-English languages. If too few results are returned, use the text parameter instead. (optional)
# @param string $entities Filter news by entities (see semantic types). (optional)
# @param string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers. (optional)
# @param string $sort The sorting criteria (publish-time). (optional)
# @param string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
# @param int $offset The number of news to skip in range [0,100000] (optional)
# @param int $number The number of news to return in range [1,100] (optional)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. For exact matches just put your term in quotes, e.g. \&quot;elon musk\&quot;.',
        required => '0',
    },
    'text_match_indexes' => {
        data_type => 'string',
        description => 'If a \&quot;text\&quot; is given to search for, you can specify where this text is searched for. Possible values are title, content, or both separated by a comma. By default, both title and content are searched.',
        required => '0',
    },
    'source_country' => {
        data_type => 'string',
        description => 'The ISO 3166 country code from which the news should originate.',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'The ISO 6391 language code of the news.',
        required => '0',
    },
    'min_sentiment' => {
        data_type => 'double',
        description => 'The minimal sentiment of the news in range [-1,1].',
        required => '0',
    },
    'max_sentiment' => {
        data_type => 'double',
        description => 'The maximal sentiment of the news in range [-1,1].',
        required => '0',
    },
    'earliest_publish_date' => {
        data_type => 'string',
        description => 'The news must have been published after this date.',
        required => '0',
    },
    'latest_publish_date' => {
        data_type => 'string',
        description => 'The news must have been published before this date.',
        required => '0',
    },
    'news_sources' => {
        data_type => 'string',
        description => 'A comma-separated list of news sources from which the news should originate.',
        required => '0',
    },
    'authors' => {
        data_type => 'string',
        description => 'A comma-separated list of author names. Only news from any of the given authors will be returned.',
        required => '0',
    },
    'categories' => {
        data_type => 'string',
        description => 'A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. Please note that the filter might leave out news, especially in non-English languages. If too few results are returned, use the text parameter instead.',
        required => '0',
    },
    'entities' => {
        data_type => 'string',
        description => 'Filter news by entities (see semantic types).',
        required => '0',
    },
    'location_filter' => {
        data_type => 'string',
        description => 'Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;. Radius must be between 1 and 100 kilometers.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The sorting criteria (publish-time).',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Whether to sort ascending or descending (ASC or DESC).',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of news to skip in range [0,100000]',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of news to return in range [1,100]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_news' } = {
        summary => 'Search News',
        params => $params,
        returns => 'SearchNews200Response',
        };
}
# @return SearchNews200Response
#
sub search_news {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/search-news';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'text_match_indexes'}) {
        $query_params->{'text-match-indexes'} = $self->{api_client}->to_query_value($args{'text_match_indexes'});
    }

    # query params
    if ( exists $args{'source_country'}) {
        $query_params->{'source-country'} = $self->{api_client}->to_query_value($args{'source_country'});
    }

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # query params
    if ( exists $args{'min_sentiment'}) {
        $query_params->{'min-sentiment'} = $self->{api_client}->to_query_value($args{'min_sentiment'});
    }

    # query params
    if ( exists $args{'max_sentiment'}) {
        $query_params->{'max-sentiment'} = $self->{api_client}->to_query_value($args{'max_sentiment'});
    }

    # query params
    if ( exists $args{'earliest_publish_date'}) {
        $query_params->{'earliest-publish-date'} = $self->{api_client}->to_query_value($args{'earliest_publish_date'});
    }

    # query params
    if ( exists $args{'latest_publish_date'}) {
        $query_params->{'latest-publish-date'} = $self->{api_client}->to_query_value($args{'latest_publish_date'});
    }

    # query params
    if ( exists $args{'news_sources'}) {
        $query_params->{'news-sources'} = $self->{api_client}->to_query_value($args{'news_sources'});
    }

    # query params
    if ( exists $args{'authors'}) {
        $query_params->{'authors'} = $self->{api_client}->to_query_value($args{'authors'});
    }

    # query params
    if ( exists $args{'categories'}) {
        $query_params->{'categories'} = $self->{api_client}->to_query_value($args{'categories'});
    }

    # query params
    if ( exists $args{'entities'}) {
        $query_params->{'entities'} = $self->{api_client}->to_query_value($args{'entities'});
    }

    # query params
    if ( exists $args{'location_filter'}) {
        $query_params->{'location-filter'} = $self->{api_client}->to_query_value($args{'location_filter'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort-direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchNews200Response', $response);
    return $_response_object;
}

#
# search_news_sources
#
# Search News Sources
#
# @param string $name The (partial) name of the source. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The (partial) name of the source.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_news_sources' } = {
        summary => 'Search News Sources',
        params => $params,
        returns => 'SearchNewsSources200Response',
        };
}
# @return SearchNewsSources200Response
#
sub search_news_sources {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling search_news_sources");
    }

    # parse inputs
    my $_resource_path = '/search-news-sources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchNewsSources200Response', $response);
    return $_response_object;
}

#
# top_news
#
# Top News
#
# @param string $source_country The ISO 3166 country code of the country for which top news should be retrieved. (required)
# @param string $language The ISO 6391 language code of the top news. The language must be one spoken in the source-country. (required)
# @param string $date The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)
# @param boolean $headlines_only Whether to only return basic information such as id, title, and url of the news. (optional)
{
    my $params = {
    'source_country' => {
        data_type => 'string',
        description => 'The ISO 3166 country code of the country for which top news should be retrieved.',
        required => '1',
    },
    'language' => {
        data_type => 'string',
        description => 'The ISO 6391 language code of the top news. The language must be one spoken in the source-country.',
        required => '1',
    },
    'date' => {
        data_type => 'string',
        description => 'The date for which the top news should be retrieved. If no date is given, the current day is assumed.',
        required => '0',
    },
    'headlines_only' => {
        data_type => 'boolean',
        description => 'Whether to only return basic information such as id, title, and url of the news.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'top_news' } = {
        summary => 'Top News',
        params => $params,
        returns => 'TopNews200Response',
        };
}
# @return TopNews200Response
#
sub top_news {
    my ($self, %args) = @_;

    # verify the required parameter 'source_country' is set
    unless (exists $args{'source_country'}) {
      croak("Missing the required parameter 'source_country' when calling top_news");
    }

    # verify the required parameter 'language' is set
    unless (exists $args{'language'}) {
      croak("Missing the required parameter 'language' when calling top_news");
    }

    # parse inputs
    my $_resource_path = '/top-news';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'source_country'}) {
        $query_params->{'source-country'} = $self->{api_client}->to_query_value($args{'source_country'});
    }

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'headlines_only'}) {
        $query_params->{'headlines-only'} = $self->{api_client}->to_query_value($args{'headlines_only'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TopNews200Response', $response);
    return $_response_object;
}

1;
