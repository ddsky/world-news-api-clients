/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveNewspaperFrontPage_200_response_front_page.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveNewspaperFrontPage_200_response_front_page::OAIRetrieveNewspaperFrontPage_200_response_front_page(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveNewspaperFrontPage_200_response_front_page::OAIRetrieveNewspaperFrontPage_200_response_front_page() {
    this->initializeModel();
}

OAIRetrieveNewspaperFrontPage_200_response_front_page::~OAIRetrieveNewspaperFrontPage_200_response_front_page() {}

void OAIRetrieveNewspaperFrontPage_200_response_front_page::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAIRetrieveNewspaperFrontPage_200_response_front_page::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveNewspaperFrontPage_200_response_front_page::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;
}

QString OAIRetrieveNewspaperFrontPage_200_response_front_page::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveNewspaperFrontPage_200_response_front_page::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QString OAIRetrieveNewspaperFrontPage_200_response_front_page::getName() const {
    return m_name;
}
void OAIRetrieveNewspaperFrontPage_200_response_front_page::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRetrieveNewspaperFrontPage_200_response_front_page::getDate() const {
    return m_date;
}
void OAIRetrieveNewspaperFrontPage_200_response_front_page::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_date_Set() const{
    return m_date_isSet;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIRetrieveNewspaperFrontPage_200_response_front_page::getCountry() const {
    return m_country;
}
void OAIRetrieveNewspaperFrontPage_200_response_front_page::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIRetrieveNewspaperFrontPage_200_response_front_page::getImage() const {
    return m_image;
}
void OAIRetrieveNewspaperFrontPage_200_response_front_page::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_image_Set() const{
    return m_image_isSet;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIRetrieveNewspaperFrontPage_200_response_front_page::getLanguage() const {
    return m_language;
}
void OAIRetrieveNewspaperFrontPage_200_response_front_page::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveNewspaperFrontPage_200_response_front_page::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
