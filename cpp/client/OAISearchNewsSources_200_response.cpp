/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchNewsSources_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchNewsSources_200_response::OAISearchNewsSources_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchNewsSources_200_response::OAISearchNewsSources_200_response() {
    this->initializeModel();
}

OAISearchNewsSources_200_response::~OAISearchNewsSources_200_response() {}

void OAISearchNewsSources_200_response::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAISearchNewsSources_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchNewsSources_200_response::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAISearchNewsSources_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchNewsSources_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

qint32 OAISearchNewsSources_200_response::getAvailable() const {
    return m_available;
}
void OAISearchNewsSources_200_response::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAISearchNewsSources_200_response::is_available_Set() const{
    return m_available_isSet;
}

bool OAISearchNewsSources_200_response::is_available_Valid() const{
    return m_available_isValid;
}

QList<OAISearchNewsSources_200_response_sources_inner> OAISearchNewsSources_200_response::getSources() const {
    return m_sources;
}
void OAISearchNewsSources_200_response::setSources(const QList<OAISearchNewsSources_200_response_sources_inner> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAISearchNewsSources_200_response::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAISearchNewsSources_200_response::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAISearchNewsSources_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchNewsSources_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
