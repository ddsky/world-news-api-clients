/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.3.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtractNews_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtractNews_200_response::OAIExtractNews_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtractNews_200_response::OAIExtractNews_200_response() {
    this->initializeModel();
}

OAIExtractNews_200_response::~OAIExtractNews_200_response() {}

void OAIExtractNews_200_response::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAIExtractNews_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtractNews_200_response::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publish_date")]);
    m_publish_date_isSet = !json[QString("publish_date")].isNull() && m_publish_date_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;
}

QString OAIExtractNews_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtractNews_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_video_isSet) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_publish_date_isSet) {
        obj.insert(QString("publish_date"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QString OAIExtractNews_200_response::getTitle() const {
    return m_title;
}
void OAIExtractNews_200_response::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIExtractNews_200_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIExtractNews_200_response::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIExtractNews_200_response::getText() const {
    return m_text;
}
void OAIExtractNews_200_response::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIExtractNews_200_response::is_text_Set() const{
    return m_text_isSet;
}

bool OAIExtractNews_200_response::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIExtractNews_200_response::getUrl() const {
    return m_url;
}
void OAIExtractNews_200_response::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIExtractNews_200_response::is_url_Set() const{
    return m_url_isSet;
}

bool OAIExtractNews_200_response::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIExtractNews_200_response::getImage() const {
    return m_image;
}
void OAIExtractNews_200_response::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIExtractNews_200_response::is_image_Set() const{
    return m_image_isSet;
}

bool OAIExtractNews_200_response::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIExtractNews_200_response_images_inner> OAIExtractNews_200_response::getImages() const {
    return m_images;
}
void OAIExtractNews_200_response::setImages(const QList<OAIExtractNews_200_response_images_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIExtractNews_200_response::is_images_Set() const{
    return m_images_isSet;
}

bool OAIExtractNews_200_response::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIExtractNews_200_response::getVideo() const {
    return m_video;
}
void OAIExtractNews_200_response::setVideo(const QString &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIExtractNews_200_response::is_video_Set() const{
    return m_video_isSet;
}

bool OAIExtractNews_200_response::is_video_Valid() const{
    return m_video_isValid;
}

QList<OAIExtractNews_200_response_videos_inner> OAIExtractNews_200_response::getVideos() const {
    return m_videos;
}
void OAIExtractNews_200_response::setVideos(const QList<OAIExtractNews_200_response_videos_inner> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIExtractNews_200_response::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIExtractNews_200_response::is_videos_Valid() const{
    return m_videos_isValid;
}

QString OAIExtractNews_200_response::getPublishDate() const {
    return m_publish_date;
}
void OAIExtractNews_200_response::setPublishDate(const QString &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAIExtractNews_200_response::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAIExtractNews_200_response::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

QString OAIExtractNews_200_response::getAuthor() const {
    return m_author;
}
void OAIExtractNews_200_response::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIExtractNews_200_response::is_author_Set() const{
    return m_author_isSet;
}

bool OAIExtractNews_200_response::is_author_Valid() const{
    return m_author_isValid;
}

QList<QString> OAIExtractNews_200_response::getAuthors() const {
    return m_authors;
}
void OAIExtractNews_200_response::setAuthors(const QList<QString> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIExtractNews_200_response::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIExtractNews_200_response::is_authors_Valid() const{
    return m_authors_isValid;
}

QString OAIExtractNews_200_response::getLanguage() const {
    return m_language;
}
void OAIExtractNews_200_response::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIExtractNews_200_response::is_language_Set() const{
    return m_language_isSet;
}

bool OAIExtractNews_200_response::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIExtractNews_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtractNews_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
