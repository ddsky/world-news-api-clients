/**
 * World News API
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtractNewsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtractNewsResponse::OAIExtractNewsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtractNewsResponse::OAIExtractNewsResponse() {
    this->initializeModel();
}

OAIExtractNewsResponse::~OAIExtractNewsResponse() {}

void OAIExtractNewsResponse::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_source_country_isSet = false;
    m_source_country_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;
}

void OAIExtractNewsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtractNewsResponse::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_source_country_isValid = ::OpenAPI::fromJsonValue(m_source_country, json[QString("source_country")]);
    m_source_country_isSet = !json[QString("source_country")].isNull() && m_source_country_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;
}

QString OAIExtractNewsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtractNewsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_source_country_isSet) {
        obj.insert(QString("source_country"), ::OpenAPI::toJsonValue(m_source_country));
    }
    if (m_sentiment_isSet) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    return obj;
}

QString OAIExtractNewsResponse::getTitle() const {
    return m_title;
}
void OAIExtractNewsResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIExtractNewsResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIExtractNewsResponse::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIExtractNewsResponse::getText() const {
    return m_text;
}
void OAIExtractNewsResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIExtractNewsResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAIExtractNewsResponse::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIExtractNewsResponse::getUrl() const {
    return m_url;
}
void OAIExtractNewsResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIExtractNewsResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIExtractNewsResponse::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIExtractNewsResponse::getImage() const {
    return m_image;
}
void OAIExtractNewsResponse::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIExtractNewsResponse::is_image_Set() const{
    return m_image_isSet;
}

bool OAIExtractNewsResponse::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIExtractNewsResponse::getAuthor() const {
    return m_author;
}
void OAIExtractNewsResponse::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIExtractNewsResponse::is_author_Set() const{
    return m_author_isSet;
}

bool OAIExtractNewsResponse::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIExtractNewsResponse::getLanguage() const {
    return m_language;
}
void OAIExtractNewsResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIExtractNewsResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAIExtractNewsResponse::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIExtractNewsResponse::getSourceCountry() const {
    return m_source_country;
}
void OAIExtractNewsResponse::setSourceCountry(const QString &source_country) {
    m_source_country = source_country;
    m_source_country_isSet = true;
}

bool OAIExtractNewsResponse::is_source_country_Set() const{
    return m_source_country_isSet;
}

bool OAIExtractNewsResponse::is_source_country_Valid() const{
    return m_source_country_isValid;
}

double OAIExtractNewsResponse::getSentiment() const {
    return m_sentiment;
}
void OAIExtractNewsResponse::setSentiment(const double &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAIExtractNewsResponse::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAIExtractNewsResponse::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

bool OAIExtractNewsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtractNewsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
