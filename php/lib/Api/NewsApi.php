<?php
/**
 * NewsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * World News API
 *
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@worldnewsapi.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * NewsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'extractNews' => [
            'application/json',
        ],
        'extractNewsLinks' => [
            'application/json',
        ],
        'geoCoordinates' => [
            'application/json',
        ],
        'newsWebsiteToRSSFeed' => [
            'application/json',
        ],
        'searchNews' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation extractNews
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNews'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExtractNewsResponse
     */
    public function extractNews($url, $analyze, string $contentType = self::contentTypes['extractNews'][0])
    {
        list($response) = $this->extractNewsWithHttpInfo($url, $analyze, $contentType);
        return $response;
    }

    /**
     * Operation extractNewsWithHttpInfo
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNews'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExtractNewsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractNewsWithHttpInfo($url, $analyze, string $contentType = self::contentTypes['extractNews'][0])
    {
        $request = $this->extractNewsRequest($url, $analyze, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExtractNewsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtractNewsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtractNewsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExtractNewsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtractNewsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractNewsAsync
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNews'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsAsync($url, $analyze, string $contentType = self::contentTypes['extractNews'][0])
    {
        return $this->extractNewsAsyncWithHttpInfo($url, $analyze, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractNewsAsyncWithHttpInfo
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNews'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsAsyncWithHttpInfo($url, $analyze, string $contentType = self::contentTypes['extractNews'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExtractNewsResponse';
        $request = $this->extractNewsRequest($url, $analyze, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractNews'
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNews'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractNewsRequest($url, $analyze, string $contentType = self::contentTypes['extractNews'][0])
    {

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling extractNews'
            );
        }

        // verify the required parameter 'analyze' is set
        if ($analyze === null || (is_array($analyze) && count($analyze) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $analyze when calling extractNews'
            );
        }


        $resourcePath = '/extract-news';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $analyze,
            'analyze', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extractNewsLinks
     *
     * Extract News Links
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  string $prefix The prefix the news links must start with. (optional)
     * @param  bool $sub_domain Whether to include links to news on sub-domains. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNewsLinks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExtractLinksResponse
     */
    public function extractNewsLinks($url, $api_key, $prefix = null, $sub_domain = null, string $contentType = self::contentTypes['extractNewsLinks'][0])
    {
        list($response) = $this->extractNewsLinksWithHttpInfo($url, $api_key, $prefix, $sub_domain, $contentType);
        return $response;
    }

    /**
     * Operation extractNewsLinksWithHttpInfo
     *
     * Extract News Links
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  string $prefix The prefix the news links must start with. (optional)
     * @param  bool $sub_domain Whether to include links to news on sub-domains. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNewsLinks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExtractLinksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractNewsLinksWithHttpInfo($url, $api_key, $prefix = null, $sub_domain = null, string $contentType = self::contentTypes['extractNewsLinks'][0])
    {
        $request = $this->extractNewsLinksRequest($url, $api_key, $prefix, $sub_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ExtractLinksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtractLinksResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtractLinksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExtractLinksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtractLinksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractNewsLinksAsync
     *
     * Extract News Links
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  string $prefix The prefix the news links must start with. (optional)
     * @param  bool $sub_domain Whether to include links to news on sub-domains. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNewsLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsLinksAsync($url, $api_key, $prefix = null, $sub_domain = null, string $contentType = self::contentTypes['extractNewsLinks'][0])
    {
        return $this->extractNewsLinksAsyncWithHttpInfo($url, $api_key, $prefix, $sub_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractNewsLinksAsyncWithHttpInfo
     *
     * Extract News Links
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  string $prefix The prefix the news links must start with. (optional)
     * @param  bool $sub_domain Whether to include links to news on sub-domains. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNewsLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsLinksAsyncWithHttpInfo($url, $api_key, $prefix = null, $sub_domain = null, string $contentType = self::contentTypes['extractNewsLinks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExtractLinksResponse';
        $request = $this->extractNewsLinksRequest($url, $api_key, $prefix, $sub_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractNewsLinks'
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  string $prefix The prefix the news links must start with. (optional)
     * @param  bool $sub_domain Whether to include links to news on sub-domains. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractNewsLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractNewsLinksRequest($url, $api_key, $prefix = null, $sub_domain = null, string $contentType = self::contentTypes['extractNewsLinks'][0])
    {

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling extractNewsLinks'
            );
        }

        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling extractNewsLinks'
            );
        }




        $resourcePath = '/extract-news-links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prefix,
            'prefix', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sub_domain,
            'sub-domain', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_key,
            'api-key', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geoCoordinates
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoCoordinates'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GeoCoordinatesResponse
     */
    public function geoCoordinates($location, string $contentType = self::contentTypes['geoCoordinates'][0])
    {
        list($response) = $this->geoCoordinatesWithHttpInfo($location, $contentType);
        return $response;
    }

    /**
     * Operation geoCoordinatesWithHttpInfo
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoCoordinates'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GeoCoordinatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function geoCoordinatesWithHttpInfo($location, string $contentType = self::contentTypes['geoCoordinates'][0])
    {
        $request = $this->geoCoordinatesRequest($location, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GeoCoordinatesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GeoCoordinatesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GeoCoordinatesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GeoCoordinatesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GeoCoordinatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geoCoordinatesAsync
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoCoordinates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geoCoordinatesAsync($location, string $contentType = self::contentTypes['geoCoordinates'][0])
    {
        return $this->geoCoordinatesAsyncWithHttpInfo($location, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geoCoordinatesAsyncWithHttpInfo
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoCoordinates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geoCoordinatesAsyncWithHttpInfo($location, string $contentType = self::contentTypes['geoCoordinates'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GeoCoordinatesResponse';
        $request = $this->geoCoordinatesRequest($location, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geoCoordinates'
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geoCoordinates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geoCoordinatesRequest($location, string $contentType = self::contentTypes['geoCoordinates'][0])
    {

        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling geoCoordinates'
            );
        }


        $resourcePath = '/geo-coordinates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location,
            'location', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newsWebsiteToRSSFeed
     *
     * News Website to RSS Feed
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  bool $extract_news Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newsWebsiteToRSSFeed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function newsWebsiteToRSSFeed($url, $api_key, $extract_news = null, string $contentType = self::contentTypes['newsWebsiteToRSSFeed'][0])
    {
        list($response) = $this->newsWebsiteToRSSFeedWithHttpInfo($url, $api_key, $extract_news, $contentType);
        return $response;
    }

    /**
     * Operation newsWebsiteToRSSFeedWithHttpInfo
     *
     * News Website to RSS Feed
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  bool $extract_news Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newsWebsiteToRSSFeed'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function newsWebsiteToRSSFeedWithHttpInfo($url, $api_key, $extract_news = null, string $contentType = self::contentTypes['newsWebsiteToRSSFeed'][0])
    {
        $request = $this->newsWebsiteToRSSFeedRequest($url, $api_key, $extract_news, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newsWebsiteToRSSFeedAsync
     *
     * News Website to RSS Feed
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  bool $extract_news Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newsWebsiteToRSSFeed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newsWebsiteToRSSFeedAsync($url, $api_key, $extract_news = null, string $contentType = self::contentTypes['newsWebsiteToRSSFeed'][0])
    {
        return $this->newsWebsiteToRSSFeedAsyncWithHttpInfo($url, $api_key, $extract_news, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newsWebsiteToRSSFeedAsyncWithHttpInfo
     *
     * News Website to RSS Feed
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  bool $extract_news Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newsWebsiteToRSSFeed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newsWebsiteToRSSFeedAsyncWithHttpInfo($url, $api_key, $extract_news = null, string $contentType = self::contentTypes['newsWebsiteToRSSFeed'][0])
    {
        $returnType = 'object';
        $request = $this->newsWebsiteToRSSFeedRequest($url, $api_key, $extract_news, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newsWebsiteToRSSFeed'
     *
     * @param  string $url The url from which links should be extracted. (required)
     * @param  string $api_key Your API key. (required)
     * @param  bool $extract_news Whether extract news and add information such as description, publish date, and image to each item. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['newsWebsiteToRSSFeed'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function newsWebsiteToRSSFeedRequest($url, $api_key, $extract_news = null, string $contentType = self::contentTypes['newsWebsiteToRSSFeed'][0])
    {

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling newsWebsiteToRSSFeed'
            );
        }

        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling newsWebsiteToRSSFeed'
            );
        }



        $resourcePath = '/feed.rss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extract_news,
            'extract-news', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_key,
            'api-key', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchNews
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  float $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  float $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchNews'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchNewsResponse
     */
    public function searchNews($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null, string $contentType = self::contentTypes['searchNews'][0])
    {
        list($response) = $this->searchNewsWithHttpInfo($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction, $contentType);
        return $response;
    }

    /**
     * Operation searchNewsWithHttpInfo
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  float $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  float $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchNews'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchNewsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchNewsWithHttpInfo($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null, string $contentType = self::contentTypes['searchNews'][0])
    {
        $request = $this->searchNewsRequest($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchNewsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchNewsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchNewsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchNewsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchNewsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchNewsAsync
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  float $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  float $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchNews'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNewsAsync($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null, string $contentType = self::contentTypes['searchNews'][0])
    {
        return $this->searchNewsAsyncWithHttpInfo($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchNewsAsyncWithHttpInfo
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  float $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  float $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchNews'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNewsAsyncWithHttpInfo($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null, string $contentType = self::contentTypes['searchNews'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchNewsResponse';
        $request = $this->searchNewsRequest($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchNews'
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  float $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  float $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchNews'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchNewsRequest($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null, string $contentType = self::contentTypes['searchNews'][0])
    {




        if ($min_sentiment !== null && $min_sentiment > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_sentiment" when calling NewsApi.searchNews, must be smaller than or equal to 1.');
        }
        if ($min_sentiment !== null && $min_sentiment < -1) {
            throw new \InvalidArgumentException('invalid value for "$min_sentiment" when calling NewsApi.searchNews, must be bigger than or equal to -1.');
        }
        
        if ($max_sentiment !== null && $max_sentiment > 1) {
            throw new \InvalidArgumentException('invalid value for "$max_sentiment" when calling NewsApi.searchNews, must be smaller than or equal to 1.');
        }
        if ($max_sentiment !== null && $max_sentiment < -1) {
            throw new \InvalidArgumentException('invalid value for "$max_sentiment" when calling NewsApi.searchNews, must be bigger than or equal to -1.');
        }
        






        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewsApi.searchNews, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewsApi.searchNews, must be bigger than or equal to 0.');
        }
        
        if ($number !== null && $number > 100) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling NewsApi.searchNews, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/search-news';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $text,
            'text', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source_countries,
            'source-countries', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_sentiment,
            'min-sentiment', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_sentiment,
            'max-sentiment', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $earliest_publish_date,
            'earliest-publish-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latest_publish_date,
            'latest-publish-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $news_sources,
            'news-sources', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authors,
            'authors', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entities,
            'entities', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $location_filter,
            'location-filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_direction,
            'sort-direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
