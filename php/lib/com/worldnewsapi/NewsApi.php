<?php
/**
 * NewsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  com.worldnewsapi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * World News API
 *
 * The world's news wrapped into a single API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@worldnewsapi.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.worldnewsapi.client\com.worldnewsapi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.worldnewsapi.client\ApiException;
use com.worldnewsapi.client\Configuration;
use com.worldnewsapi.client\HeaderSelector;
use com.worldnewsapi.client\ObjectSerializer;

/**
 * NewsApi Class Doc Comment
 *
 * @category Class
 * @package  com.worldnewsapi.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation extractNews
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \com.worldnewsapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001
     */
    public function extractNews($url, $analyze)
    {
        list($response) = $this->extractNewsWithHttpInfo($url, $analyze);
        return $response;
    }

    /**
     * Operation extractNewsWithHttpInfo
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \com.worldnewsapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractNewsWithHttpInfo($url, $analyze)
    {
        $request = $this->extractNewsRequest($url, $analyze);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractNewsAsync
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsAsync($url, $analyze)
    {
        return $this->extractNewsAsyncWithHttpInfo($url, $analyze)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractNewsAsyncWithHttpInfo
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsAsyncWithHttpInfo($url, $analyze)
    {
        $returnType = '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2001';
        $request = $this->extractNewsRequest($url, $analyze);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractNews'
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractNewsRequest($url, $analyze)
    {
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling extractNews'
            );
        }
        // verify the required parameter 'analyze' is set
        if ($analyze === null || (is_array($analyze) && count($analyze) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $analyze when calling extractNews'
            );
        }

        $resourcePath = '/extract-news';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($url !== null) {
            if('form' === 'form' && is_array($url)) {
                foreach($url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['url'] = $url;
            }
        }
        // query params
        if ($analyze !== null) {
            if('form' === 'form' && is_array($analyze)) {
                foreach($analyze as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['analyze'] = $analyze;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geoCoordinates
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     *
     * @throws \com.worldnewsapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002
     */
    public function geoCoordinates($location)
    {
        list($response) = $this->geoCoordinatesWithHttpInfo($location);
        return $response;
    }

    /**
     * Operation geoCoordinatesWithHttpInfo
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     *
     * @throws \com.worldnewsapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function geoCoordinatesWithHttpInfo($location)
    {
        $request = $this->geoCoordinatesRequest($location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geoCoordinatesAsync
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geoCoordinatesAsync($location)
    {
        return $this->geoCoordinatesAsyncWithHttpInfo($location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geoCoordinatesAsyncWithHttpInfo
     *
     * Get Geo Coordinates
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geoCoordinatesAsyncWithHttpInfo($location)
    {
        $returnType = '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse2002';
        $request = $this->geoCoordinatesRequest($location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geoCoordinates'
     *
     * @param  string $location The address or name of the location, e.g. Tokyo, Japan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geoCoordinatesRequest($location)
    {
        // verify the required parameter 'location' is set
        if ($location === null || (is_array($location) && count($location) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling geoCoordinates'
            );
        }

        $resourcePath = '/geo-coordinates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($location !== null) {
            if('form' === 'form' && is_array($location)) {
                foreach($location as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location'] = $location;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchNews
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     *
     * @throws \com.worldnewsapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200
     */
    public function searchNews($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null)
    {
        list($response) = $this->searchNewsWithHttpInfo($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction);
        return $response;
    }

    /**
     * Operation searchNewsWithHttpInfo
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     *
     * @throws \com.worldnewsapi.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchNewsWithHttpInfo($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null)
    {
        $request = $this->searchNewsRequest($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchNewsAsync
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNewsAsync($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null)
    {
        return $this->searchNewsAsyncWithHttpInfo($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchNewsAsyncWithHttpInfo
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNewsAsyncWithHttpInfo($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null)
    {
        $returnType = '\com.worldnewsapi.client\com.worldnewsapi.client.model\InlineResponse200';
        $request = $this->searchNewsRequest($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $offset, $number, $sort, $sort_direction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchNews'
     *
     * @param  string $text The text to match in the news content. (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. gb,us. (optional)
     * @param  string $language The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities, e.g. ORG:Tesla. (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     * @param  int $offset The number of news to skip in range [0,1000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     * @param  string $sort The sorting criteria. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchNewsRequest($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $offset = null, $number = null, $sort = null, $sort_direction = null)
    {
        if ($min_sentiment !== null && $min_sentiment > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_sentiment" when calling NewsApi.searchNews, must be smaller than or equal to 1.');
        }
        if ($min_sentiment !== null && $min_sentiment < -1) {
            throw new \InvalidArgumentException('invalid value for "$min_sentiment" when calling NewsApi.searchNews, must be bigger than or equal to -1.');
        }

        if ($max_sentiment !== null && $max_sentiment > 1) {
            throw new \InvalidArgumentException('invalid value for "$max_sentiment" when calling NewsApi.searchNews, must be smaller than or equal to 1.');
        }
        if ($max_sentiment !== null && $max_sentiment < -1) {
            throw new \InvalidArgumentException('invalid value for "$max_sentiment" when calling NewsApi.searchNews, must be bigger than or equal to -1.');
        }

        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewsApi.searchNews, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewsApi.searchNews, must be bigger than or equal to 0.');
        }

        if ($number !== null && $number > 100) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling NewsApi.searchNews, must be bigger than or equal to 1.');
        }


        $resourcePath = '/search-news';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($text !== null) {
            if('form' === 'form' && is_array($text)) {
                foreach($text as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['text'] = $text;
            }
        }
        // query params
        if ($source_countries !== null) {
            if('form' === 'form' && is_array($source_countries)) {
                foreach($source_countries as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['source-countries'] = $source_countries;
            }
        }
        // query params
        if ($language !== null) {
            if('form' === 'form' && is_array($language)) {
                foreach($language as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['language'] = $language;
            }
        }
        // query params
        if ($min_sentiment !== null) {
            if('form' === 'form' && is_array($min_sentiment)) {
                foreach($min_sentiment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['min-sentiment'] = $min_sentiment;
            }
        }
        // query params
        if ($max_sentiment !== null) {
            if('form' === 'form' && is_array($max_sentiment)) {
                foreach($max_sentiment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['max-sentiment'] = $max_sentiment;
            }
        }
        // query params
        if ($earliest_publish_date !== null) {
            if('form' === 'form' && is_array($earliest_publish_date)) {
                foreach($earliest_publish_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['earliest-publish-date'] = $earliest_publish_date;
            }
        }
        // query params
        if ($latest_publish_date !== null) {
            if('form' === 'form' && is_array($latest_publish_date)) {
                foreach($latest_publish_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['latest-publish-date'] = $latest_publish_date;
            }
        }
        // query params
        if ($news_sources !== null) {
            if('form' === 'form' && is_array($news_sources)) {
                foreach($news_sources as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['news-sources'] = $news_sources;
            }
        }
        // query params
        if ($authors !== null) {
            if('form' === 'form' && is_array($authors)) {
                foreach($authors as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['authors'] = $authors;
            }
        }
        // query params
        if ($entities !== null) {
            if('form' === 'form' && is_array($entities)) {
                foreach($entities as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entities'] = $entities;
            }
        }
        // query params
        if ($location_filter !== null) {
            if('form' === 'form' && is_array($location_filter)) {
                foreach($location_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['location-filter'] = $location_filter;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($number !== null) {
            if('form' === 'form' && is_array($number)) {
                foreach($number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['number'] = $number;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($sort_direction !== null) {
            if('form' === 'form' && is_array($sort_direction)) {
                foreach($sort_direction as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort-direction'] = $sort_direction;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
